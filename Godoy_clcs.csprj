
<codestructure version="5.8">
<phptree>
<treenode node="Config/Autoload.php;PHP:PHP Include;Z:\Godoy\index.php;f14;1;33;1;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="../Config/Autoload.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f14;1;36;1;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="Config/Autoload.php;PHP:PHP Include;Z:\Godoy\servicios.php;f14;1;33;1;;Z:\Godoy\servicio.php;f14;1;33;1;;Z:\Godoy\novedades.php;f14;1;33;1;;Z:\Godoy\novedad.php;f14;1;33;1;;Z:\Godoy\contenidos.php;f14;1;33;1;;Z:\Godoy\contacto.php;f14;1;33;1;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="ZEBRA_IMAGE_BOXED;PHP:PHP Word;Z:\Godoy\clases\Zebra_Image.php;f8;5;25;5;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Methods used with the {&#10;&lt;b&gt;link&lt;/b&gt;: resize()} method.;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="ZEBRA_IMAGE_CROP_BOTTOMCENTER;PHP:PHP Word;Z:\Godoy\clases\Zebra_Image.php;f8;14;37;14;;;;vpos;;v;;a;;r9;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="ZEBRA_IMAGE_CROP_BOTTOMLEFT;PHP:PHP Word;Z:\Godoy\clases\Zebra_Image.php;f8;13;35;13;;;;vpos;;v;;a;;r8;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="ZEBRA_IMAGE_CROP_BOTTOMRIGHT;PHP:PHP Word;Z:\Godoy\clases\Zebra_Image.php;f8;15;36;15;;;;vpos;;v;;a;;r10;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="ZEBRA_IMAGE_CROP_CENTER;PHP:PHP Word;Z:\Godoy\clases\Zebra_Image.php;f8;11;31;11;;;;vpos;;v;;a;;r6;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="ZEBRA_IMAGE_CROP_MIDDLELEFT;PHP:PHP Word;Z:\Godoy\clases\Zebra_Image.php;f8;10;35;10;;;;vpos;;v;;a;;r5;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="ZEBRA_IMAGE_CROP_MIDDLERIGHT;PHP:PHP Word;Z:\Godoy\clases\Zebra_Image.php;f8;12;36;12;;;;vpos;;v;;a;;r7;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="ZEBRA_IMAGE_CROP_TOPCENTER;PHP:PHP Word;Z:\Godoy\clases\Zebra_Image.php;f8;8;34;8;;;;vpos;;v;;a;;r3;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="ZEBRA_IMAGE_CROP_TOPLEFT;PHP:PHP Word;Z:\Godoy\clases\Zebra_Image.php;f8;7;32;7;;;;vpos;;v;;a;;r2;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="ZEBRA_IMAGE_CROP_TOPRIGHT;PHP:PHP Word;Z:\Godoy\clases\Zebra_Image.php;f8;9;33;9;;;;vpos;;v;;a;;r4;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="ZEBRA_IMAGE_NOT_BOXED;PHP:PHP Word;Z:\Godoy\clases\Zebra_Image.php;f8;6;29;6;;;;vpos;;v;;a;;r1;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/contenidos/agregar_contenido.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;27;57;27;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/contenidos/modificar_contenido.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;24;59;24;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/contenidos/ver_contenido.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;21;53;21;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/galerias/agregar_galerias.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;57;54;57;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/galerias/modificar_galerias.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;54;56;54;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/galerias/ver_galerias.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;51;50;51;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/novedades/agregar_novedades.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;77;56;77;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/novedades/modificar_novedades.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;74;58;74;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/novedades/ver_novedades.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;71;52;71;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/portfolio/agregar_portfolio.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;37;56;37;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/portfolio/modificar_portfolio.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;34;58;34;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/portfolio/ver_portfolio.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;31;52;31;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/productos/agregar_productos.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;67;56;67;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/productos/modificar_productos.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;64;58;64;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/productos/ver_productos.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;61;52;61;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/servicios/agregar_servicios.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;97;56;97;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/servicios/modificar_servicios.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;94;58;94;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/servicios/ver_servicios.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;91;52;91;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/sliders/agregar_slider.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;87;51;87;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/sliders/modificar_slider.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;84;53;84;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/sliders/ver_slider.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;81;47;81;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/usuarios/agregar_usuario.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;107;53;107;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/usuarios/modificar_usuario.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;104;55;104;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/usuarios/ver_usuario.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;101;49;101;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/videos/agregar_videos.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;47;50;47;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/videos/modificar_videos.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;44;52;44;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="inc/videos/ver_videos.php;PHP:PHP Include;Z:\Godoy\admin\index.php;f21;41;46;41;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="vendor/autoload.php;PHP:PHP Include;Z:\Godoy\vendor\phpmailer\phpmailer\get_oauth_token.php;f9;58;28;58;;Z:\Godoy\clases\Email.php;f9;6;28;6;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m,0;;e">
</treenode>
<treenode node="Admin;PHP:Class Name;Z:\Godoy\clases\Admin.php;f0;4;1;131;;;;vpos;;v;;a;;r;;d12,4;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Admin.php;f11;14;5;16;;;;vpos;;v;;a;;r;;d34,14;;b1,0;;m,0;;e">
</treenode>
<treenode node="add;PHP:Function Name;Z:\Godoy\clases\Admin.php;f11;26;5;30;;;;vpos;;v;;a;;r;;d26,26;;b1,0;;m,0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;Z:\Godoy\clases\Admin.php;f11;38;5;42;;;;vpos;;v;;a;;r;;d29,38;;b1,0;;m,0;;e">
</treenode>
<treenode node="edit;PHP:Function Name;Z:\Godoy\clases\Admin.php;f11;32;5;36;;;;vpos;;v;;a;;r;;d27,32;;b1,0;;m,0;;e">
</treenode>
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\Admin.php;f11;22;5;24;;;;vpos;;v;;a;;r;;d35,22;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="listTable;PHP:Function Name;Z:\Godoy\clases\Admin.php;f11;111;5;129;;;;vpos;;v;;a;;r;;d32,111;;b1,0;;m,0;;e">
</treenode>
<treenode node="login;PHP:Function Name;Z:\Godoy\clases\Admin.php;f11;51;5;60;;;;vpos;;v;;a;;r;;d28,51;;b1,0;;m,0;;e">
</treenode>
<treenode node="loginForm;PHP:Function Name;Z:\Godoy\clases\Admin.php;f11;69;5;109;;;;vpos;;v;;a;;r;;d32,69;;b1,0;;m,0;;e">
</treenode>
<treenode node="logout;PHP:Function Name;Z:\Godoy\clases\Admin.php;f11;62;5;66;;;;vpos;;v;;a;;r;;d29,62;;b1,0;;m,0;;e">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\Admin.php;f11;18;5;20;;;;vpos;;v;;a;;r;;d43,18;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
<treenode node="view;PHP:Function Name;Z:\Godoy\clases\Admin.php;f11;44;5;49;;;;vpos;;v;;a;;r;;d27,44;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="Autoload;PHP:Class Name;Z:\Godoy\config\Autoload.php;f0;4;1;34;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m,0;;e">
<treenode node="runAdmin;PHP:Function Name;Z:\Godoy\config\Autoload.php;f18;24;5;33;;;;vpos;;v;;a;;r;;d4,25;;b1,5;;m,0;;e">
</treenode>
<treenode node="runSitio;PHP:Function Name;Z:\Godoy\config\Autoload.php;f18;6;5;22;;;;vpos;;v;;a;;r;;d4,7;;b1,5;;m,0;;e">
</treenode>
</treenode>
<treenode node="Carrito;PHP:Class Name;Z:\Godoy\clases\Carrito.php;f0;4;1;87;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Carrito.php;f11;16;5;19;;;;vpos;;v;;a;;r;;d4,17;;b1,0;;m,0;;e">
</treenode>
<treenode node="add;PHP:Function Name;Z:\Godoy\clases\Carrito.php;f11;31;5;58;;;;vpos;;v;;a;;r;;d4,32;;b1,0;;m,0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;Z:\Godoy\clases\Carrito.php;f11;69;5;73;;;;vpos;;v;;a;;r;;d4,70;;b1,0;;m,0;;ekey;;p">
</treenode>
<treenode node="destroy;PHP:Function Name;Z:\Godoy\clases\Carrito.php;f11;82;5;86;;;;vpos;;v;;a;;r;;d4,83;;b1,0;;m,0;;e">
</treenode>
<treenode node="edit;PHP:Function Name;Z:\Godoy\clases\Carrito.php;f11;75;5;80;;;;vpos;;v;;a;;r;;d4,76;;b1,0;;m,0;;ekey;;p">
</treenode>
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\Carrito.php;f11;26;5;29;;;;vpos;;v;;a;;r;;d4,27;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="precioFinal;PHP:Function Name;Z:\Godoy\clases\Carrito.php;f11;60;5;67;;;;vpos;;v;;a;;r;;d4,61;;b1,0;;m,0;;e">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\Carrito.php;f11;21;5;24;;;;vpos;;v;;a;;r;;d4,22;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
</treenode>
<treenode node="ClassLoader;PHP:Class Name;Z:\Godoy\vendor\composer\ClassLoader.php;f0;42;1;434;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class ClassLoader&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    ClassLoader implements a PSR-0, PSR-4 and classmap class loader.&#10;$loader = new \Composer\Autoload\ClassLoader();s&#10;// register classes with namespaces&#10;$loader-&gt;add(&apos;Symfony\Component&apos;, __DIR__.&apos;/component&apos;);s&#10;$loader-&gt;add(&apos;Symfony&apos;,           __DIR__.&apos;/framework&apos;);s&#10;// activate the autoloader&#10;$loader-&gt;register();s&#10;// to enable searching the include path (eg. for PEAR packages)&#10;$loader-&gt;setUseIncludePath(true);s&#10;In this example, if you try to use a class in the Symfony\Component&#10;namespace or one of its children (Symfony\Component\Console for instance),&#10;the autoloader will first look for the class under the component/&#10;directory, and it will then fallback to the framework/ directory if not&#10;found before giving up.&#10;This class is loosely based on the Symfony UniversalClassLoader.&#10;&lt;b&gt;author&lt;/b&gt;: Fabien Potencier &lt;fabien&#10;&lt;b&gt;symfony&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Jordi Boggiano &lt;j.boggiano&#10;&lt;b&gt;seld&lt;/b&gt;: .be&gt;&#10;&lt;b&gt;see&lt;/b&gt;: http://www.php-fig.org/psr/psr-0/&#10;&lt;b&gt;see&lt;/b&gt;: http://www.php-fig.org/psr/psr-4/;;d0,43;;b0,0;;m,0;;e">
<treenode node="add;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;108;5;143;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    add($prefix, $paths, $prepend = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers a set of PSR-0 directories for a given prefix, either&#10;appending or prepending to the ones previously set for this prefix.&#10;The prefix&#10;The PSR-0 root directories&#10;Whether to prepend the directories&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$prefix&lt;/b&gt;: The prefix&#10;    array|string &lt;b&gt;$paths&lt;/b&gt;: The PSR-0 root directories&#10;    bool &lt;b&gt;$prepend&lt;/b&gt;: Whether to prepend the directories;;d4,109;;b1,0;;m,0;;estring $prefix;;parray|string $paths;;pbool $prepend;;p">
</treenode>
<treenode node="addClassMap;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;91;5;98;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addClassMap(array $classMap)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Class to filename map&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$classMap&lt;/b&gt;: Class to filename map;;d4,92;;b1,0;;m,0;;earray $classMap;;p">
</treenode>
<treenode node="addPsr4;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;155;5;191;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addPsr4($prefix, $paths, $prepend = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers a set of PSR-4 directories for a given namespace, either&#10;appending or prepending to the ones previously set for this namespace.&#10;The prefix/namespace, with trailing &apos;\\&apos;&#10;The PSR-4 base directories&#10;Whether to prepend the directories&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$prefix&lt;/b&gt;: The prefix/namespace, with trailing &apos;\\&apos;&#10;    array|string &lt;b&gt;$paths&lt;/b&gt;: The PSR-4 base directories&#10;    bool &lt;b&gt;$prepend&lt;/b&gt;: Whether to prepend the directories;;d4,156;;b1,0;;m,0;;estring $prefix;;parray|string $paths;;pbool $prepend;;p">
</treenode>
<treenode node="findFile;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;334;5;367;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    findFile($class)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Finds the path to the file where the class is defined.&#10;The name of the class&#10;&lt;b&gt;return&lt;/b&gt;: |false The path if found, false otherwise&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$class&lt;/b&gt;: The name of the class;;d4,335;;b1,0;;m,0;;estring $class;;p">
</treenode>
<treenode node="findFileWithExtension;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f12;369;5;433;;;;vpos;;v;;a;;r;;d4,370;;b3,0;;m,0;;eclass;;pext;;p">
</treenode>
<treenode node="getApcuPrefix;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;289;5;292;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getApcuPrefix()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The APCu prefix in use, or null if APCu caching is not enabled.&#10;&lt;b&gt;return&lt;/b&gt;: |null;;d4,290;;b1,0;;m,0;;e">
</treenode>
<treenode node="getClassMap;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;83;5;86;;;;vpos;;v;;a;;r;;d4,84;;b1,0;;m,0;;e">
</treenode>
<treenode node="getFallbackDirs;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;73;5;76;;;;vpos;;v;;a;;r;;d4,74;;b1,0;;m,0;;e">
</treenode>
<treenode node="getFallbackDirsPsr4;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;78;5;81;;;;vpos;;v;;a;;r;;d4,79;;b1,0;;m,0;;e">
</treenode>
<treenode node="getPrefixes;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;59;5;66;;;;vpos;;v;;a;;r;;d4,60;;b1,0;;m,0;;e">
</treenode>
<treenode node="getPrefixesPsr4;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;68;5;71;;;;vpos;;v;;a;;r;;d4,69;;b1,0;;m,0;;e">
</treenode>
<treenode node="getUseIncludePath;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;248;5;251;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getUseIncludePath()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Can be used to check if the autoloader uses the include path to check&#10;for classes.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,249;;b1,0;;m,0;;e">
</treenode>
<treenode node="isClassMapAuthoritative;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;269;5;272;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isClassMapAuthoritative()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Should class lookup fail if not found in the current class map?&#10;&lt;b&gt;return&lt;/b&gt;;;d4,270;;b1,0;;m,0;;e">
</treenode>
<treenode node="loadClass;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;318;5;325;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    loadClass($class)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Loads the given class or interface.&#10;The name of the class&#10;&lt;b&gt;return&lt;/b&gt;: |null True if loaded, null otherwise&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$class&lt;/b&gt;: The name of the class;;d4,319;;b1,0;;m,0;;estring $class;;p">
</treenode>
<treenode node="register;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;299;5;302;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    register($prepend = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers this instance as an autoloader.&#10;Whether to prepend the autoloader or not&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$prepend&lt;/b&gt;: Whether to prepend the autoloader or not;;d4,300;;b1,0;;m,0;;ebool $prepend;;p">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;200;5;207;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    set($prefix, $paths)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers a set of PSR-0 directories for a given prefix,&#10;replacing any others previously set for this prefix.&#10;The prefix&#10;The PSR-0 base directories&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$prefix&lt;/b&gt;: The prefix&#10;    array|string &lt;b&gt;$paths&lt;/b&gt;: The PSR-0 base directories;;d4,201;;b1,0;;m,0;;estring $prefix;;parray|string $paths;;p">
</treenode>
<treenode node="setApcuPrefix;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;279;5;282;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setApcuPrefix($apcuPrefix)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    APCu prefix to use to cache found/not-found classes, if the extension is enabled.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|null &lt;b&gt;$apcuPrefix&lt;/b&gt;;;d4,280;;b1,0;;m,0;;estring|null $apcuPrefix;;p">
</treenode>
<treenode node="setClassMapAuthoritative;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;259;5;262;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setClassMapAuthoritative($classMapAuthoritative)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Turns off searching the prefix and fallback directories for classes&#10;that have not been registered with the class map.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$classMapAuthoritative&lt;/b&gt;;;d4,260;;b1,0;;m,0;;ebool $classMapAuthoritative;;p">
</treenode>
<treenode node="setPsr4;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;218;5;230;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setPsr4($prefix, $paths)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers a set of PSR-4 directories for a given namespace,&#10;replacing any others previously set for this namespace.&#10;The prefix/namespace, with trailing &apos;\\&apos;&#10;The PSR-4 base directories&#10;&lt;b&gt;throws&lt;/b&gt;: \InvalidArgumentException&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$prefix&lt;/b&gt;: The prefix/namespace, with trailing &apos;\\&apos;&#10;    array|string &lt;b&gt;$paths&lt;/b&gt;: The PSR-4 base directories;;d4,219;;b1,0;;m,0;;estring $prefix;;parray|string $paths;;p">
</treenode>
<treenode node="setUseIncludePath;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;237;5;240;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setUseIncludePath($useIncludePath)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Turns on searching the include path for class files.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$useIncludePath&lt;/b&gt;;;d4,238;;b1,0;;m,0;;ebool $useIncludePath;;p">
</treenode>
<treenode node="unregister;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f11;307;5;310;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    unregister()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Unregisters this instance as an autoloader.;;d4,308;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="ComposerAutoloaderInit4f6616120f0bce7de49b7ae9522d795b;PHP:Class Name;Z:\Godoy\vendor\composer\autoload_real.php;f0;4;1;51;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m,0;;e">
<treenode node="getLoader;PHP:Function Name;Z:\Godoy\vendor\composer\autoload_real.php;f18;15;5;50;;;;vpos;;v;;a;;r;;d4,16;;b1,5;;m,0;;e">
</treenode>
<treenode node="loadClassLoader;PHP:Function Name;Z:\Godoy\vendor\composer\autoload_real.php;f18;8;5;13;;;;vpos;;v;;a;;r;;d4,9;;b1,5;;m,0;;eclass;;p">
</treenode>
</treenode>
<treenode node="ComposerStaticInit4f6616120f0bce7de49b7ae9522d795b;PHP:Class Name;Z:\Godoy\vendor\composer\autoload_static.php;f0;6;1;30;;;;vpos;;v;;a;;r;;d0,7;;b0,0;;m,0;;e">
<treenode node="getInitializer;PHP:Function Name;Z:\Godoy\vendor\composer\autoload_static.php;f18;22;5;29;;;;vpos;;v;;a;;r;;d4,23;;b1,5;;m,0;;eloader;;p">
</treenode>
</treenode>
<treenode node="Conexion;PHP:Class Name;Z:\Godoy\clases\Conexion.php;f0;2;1;33;;;;vpos;;v;;a;;r;;d0,3;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Conexion.php;f11;13;5;16;;;;vpos;;v;;a;;r;;d4,14;;b1,0;;m,0;;e">
</treenode>
<treenode node="con;PHP:Function Name;Z:\Godoy\clases\Conexion.php;f11;18;5;21;;;;vpos;;v;;a;;r;;d26,18;;b1,0;;m,0;;e">
</treenode>
<treenode node="sql;PHP:Function Name;Z:\Godoy\clases\Conexion.php;f11;23;5;26;;;;vpos;;v;;a;;r;;d4,24;;b1,0;;m,0;;equery;;p">
</treenode>
<treenode node="sqlReturn;PHP:Function Name;Z:\Godoy\clases\Conexion.php;f11;28;5;32;;;;vpos;;v;;a;;r;;d4,29;;b1,0;;m,0;;equery;;p">
</treenode>
</treenode>
<treenode node="Contenidos;PHP:Class Name;Z:\Godoy\clases\Contenidos.php;f0;2;1;74;;;;vpos;;v;;a;;r;;d0,3;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Contenidos.php;f11;11;5;14;;;;vpos;;v;;a;;r;;d4,12;;b1,0;;m,0;;e">
</treenode>
<treenode node="add;PHP:Function Name;Z:\Godoy\clases\Contenidos.php;f11;26;5;31;;;;vpos;;v;;a;;r;;d4,27;;b1,0;;m,0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;Z:\Godoy\clases\Contenidos.php;f11;40;5;45;;;;vpos;;v;;a;;r;;d4,41;;b1,0;;m,0;;e">
</treenode>
<treenode node="edit;PHP:Function Name;Z:\Godoy\clases\Contenidos.php;f11;33;5;38;;;;vpos;;v;;a;;r;;d4,34;;b1,0;;m,0;;e">
</treenode>
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\Contenidos.php;f11;21;5;25;;;;vpos;;v;;a;;r;;d4,22;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="list;PHP:Function Name;Z:\Godoy\clases\Contenidos.php;f4;55;5;73;;;;vpos;;v;;a;;r;;d27,55;;b0,0;;m,0;;efilter;;p">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\Contenidos.php;f11;16;5;19;;;;vpos;;v;;a;;r;;d4,17;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
<treenode node="view;PHP:Function Name;Z:\Godoy\clases\Contenidos.php;f11;47;5;53;;;;vpos;;v;;a;;r;;d4,48;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="Email;PHP:Class Name;Z:\Godoy\clases\Email.php;f0;8;1;45;;;;vpos;;v;;a;;r;;d0,9;;b0,0;;m,0;;e">
<treenode node="emailEnviar;PHP:Function Name;Z:\Godoy\clases\Email.php;f11;15;5;44;;;;vpos;;v;;a;;r;;d4,16;;b1,0;;m,0;;easunto;;preceptor;;pemisor;;pmensaje;;p">
</treenode>
</treenode>
<treenode node="Exception;PHP:Class Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\Exception.php;f0;27;1;38;;;;vpos;;v;;aException;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Exception extends \Exception&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    PHPMailer exception handler.&#10;&lt;b&gt;author&lt;/b&gt;: Marcus Bointon &lt;phpmailer&#10;&lt;b&gt;synchromedia&lt;/b&gt;: .co.uk&gt;;;d0,28;;b0,0;;m,0;;e">
<treenode node="errorMessage;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\Exception.php;f11;34;5;37;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    errorMessage()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Prettify error message output.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,35;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="GAnalytics;PHP:Class Name;Z:\Godoy\clases\GAnalytics.php;f0;54;1;223;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GAnalytics&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    &lt;b&gt;author&lt;/b&gt;: ikhuerta&#10;&lt;b&gt;gmail&lt;/b&gt;: .com more info at blog.ikhuerta.com&#10;&lt;b&gt;name&lt;/b&gt;: Google Analytis PHP Class&#10;&lt;b&gt;version&lt;/b&gt;: 1.1&#10;Simple Example:&#10;$GAnalytics = new GAnalytics(&quot;myemail&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&quot;,&quot;mypassword12345&quot;);s&#10;// By default it connects to your first account and takes last 30 days&#10;$pageViews =    $GAnalytics-&gt;getMostViewedPages();s&#10;$landingPages =    $GAnalytics-&gt;getLandingPages();s&#10;$keywords =        $GAnalytics-&gt;getKeywords();s&#10;Advanced Example:&#10;$GAnalytics = new GAnalytics(&quot;myemail&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&quot;,&quot;mypassword12345&quot;);s&#10;$GAnalytics-&gt;setAccount( 123456789 );s // the id of the accont&#10;$GAnalytics-&gt;setDates( &quot;2009-05-27&quot;, &quot;2009-05-28&quot; );s&#10;// geting pageviews by browser order by pageviews descendant...&#10;$pageViews =$GAnalytics-&gt;requestValues(&#10;&quot;ga:browser&quot;, // dimension&#10;&quot;ga:pageviews&quot;, // metric&#10;&quot;-ga:pageviews&quot; // sortBy&#10;);s&#10;Example With filters&#10;$GAnalytics = new GAnalytics(&quot;myemail&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&quot;,&quot;mypassword12345&quot;);s&#10;$GAnalytics-&gt;setAccount( 123456789 );s // the id of the accont&#10;$GAnalytics-&gt;setDates( &quot;2009-05-27&quot;, &quot;2009-05-28&quot; );s&#10;// Creating a filter: keywords with the string &apos;seo&apos; OR the string &apos;jquery&apos;&#10;$filter = $GAnalytics-&gt;newFilter();s&#10;$filter-&gt;addANDFilter( &quot;ga:keyword&quot;, &quot;=&#10;@&quot;, &quot;seo&quot; );s&#10;$filter-&gt;addORFilter( &quot;ga:keyword&quot;, &quot;=&#10;@&quot;, &quot;jquery&quot; );s&#10;// Viewing the results&#10;$pageViews = $GAnalytics-&gt;requestValues( &quot;ga:keyword&quot;, &quot;ga:pageviews&quot;, &quot;-ga:pageviews&quot; , $filter );s&#10;More information about dimensions and metrics at http://code.google.com/intl/es-ES/apis/analytics/docs/gdata/gdataReferenceDimensionsMetrics.html&#10;More information about filters at http://code.google.com/intl/es-ES/apis/analytics/docs/gdata/gdataReference.html#filtering;;d0,55;;b0,0;;m,0;;e">
<treenode node="ACCOUNTFEEDURL;PHP:PHP Word;Z:\Godoy\clases\GAnalytics.php;f9;66;24;66;;;;vpos;;v;;a;;r&quot;http://www.google.com/analytics/feeds/accounts/ga:&quot;;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="APPNAME;PHP:PHP Word;Z:\Godoy\clases\GAnalytics.php;f9;65;17;65;;;;vpos;;v;;a;;r&quot;Google-Analytics-PHP-Class@ikhuerta.com&quot;;;d-1,-1;;b0,5;;m,0;;e">
</treenode>
<treenode node="__Construct;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f11;68;5;76;;;;vpos;;v;;a;;r;;d4,69;;b1,0;;m,0;;eemail;;ppass;;p">
</treenode>
<treenode node="getAccounts;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f11;90;5;105;;;;vpos;;v;;a;;r;;d4,91;;b1,0;;m,0;;e">
</treenode>
<treenode node="getKeywords;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f11;218;5;221;;;;vpos;;v;;a;;r;;d4,219;;b1,0;;m,0;;estart;;pnumberOfResults;;p">
</treenode>
<treenode node="getLandingPages;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f11;214;5;217;;;;vpos;;v;;a;;r;;d4,215;;b1,0;;m,0;;estart;;pnumberOfResults;;p">
</treenode>
<treenode node="getMostViewedPages;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f11;210;5;213;;;;vpos;;v;;a;;r;;d4,211;;b1,0;;m,0;;estart;;pnumberOfResults;;p">
</treenode>
<treenode node="login;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f14;78;5;88;;;;vpos;;v;;a;;r;;d4,79;;b2,0;;m,0;;e">
</treenode>
<treenode node="newFilter;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f11;205;5;208;;;;vpos;;v;;a;;r;;d4,206;;b1,0;;m,0;;e">
</treenode>
<treenode node="requestValues;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f11;169;5;203;;;;vpos;;v;;a;;r;;d4,170;;b1,0;;m,0;;edimensions;;pmetrics;;psort;;pfiltersObject;;pstart;;pnumberOfResults;;p">
</treenode>
<treenode node="requestXML;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f11;149;5;167;;;;vpos;;v;;a;;r;;d4,150;;b1,0;;m,0;;edimensions;;pmetrics;;psort;;pfiltersObject;;pstart;;pnumberOfResults;;p">
</treenode>
<treenode node="sendAuthHeaders;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f14;138;5;141;;;;vpos;;v;;a;;r;;d4,139;;b2,0;;m,0;;e">
</treenode>
<treenode node="setAccount;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f11;107;5;136;;;;vpos;;v;;a;;r;;d4,108;;b1,0;;m,0;;eaccountId;;p">
</treenode>
<treenode node="setDates;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f11;143;5;147;;;;vpos;;v;;a;;r;;d4,144;;b1,0;;m,0;;estart;;pend;;p">
</treenode>
</treenode>
<treenode node="GAnalytics_Filter;PHP:Class Name;Z:\Godoy\clases\GAnalytics.php;f0;231;1;268;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class GAnalytics_Filter&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Class to create filters.&#10;You can see more information about filters, operators and expressions at:&#10;http://code.google.com/intl/es-ES/apis/analytics/docs/gdata/gdataReference.html#filtering;;d0,232;;b0,0;;m,0;;e">
<treenode node="addANDFilter;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f11;235;5;241;;;;vpos;;v;;a;;r;;d4,236;;b1,0;;m,0;;edimensionOrMetricName;;pfilterOperator;;pexpression;;p">
</treenode>
<treenode node="addORFilter;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f11;243;5;249;;;;vpos;;v;;a;;r;;d4,244;;b1,0;;m,0;;edimensionOrMetricName;;pfilterOperator;;pexpression;;p">
</treenode>
<treenode node="getFilterString;PHP:Function Name;Z:\Godoy\clases\GAnalytics.php;f11;251;5;266;;;;vpos;;v;;a;;r;;d4,252;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="Galerias;PHP:Class Name;Z:\Godoy\clases\Galerias.php;f0;4;1;82;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Galerias.php;f11;19;5;22;;;;vpos;;v;;a;;r;;d4,20;;b1,0;;m,0;;e">
</treenode>
<treenode node="add;PHP:Function Name;Z:\Godoy\clases\Galerias.php;f11;34;5;39;;;;vpos;;v;;a;;r;;d4,35;;b1,0;;m,0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;Z:\Godoy\clases\Galerias.php;f11;48;5;53;;;;vpos;;v;;a;;r;;d4,49;;b1,0;;m,0;;e">
</treenode>
<treenode node="edit;PHP:Function Name;Z:\Godoy\clases\Galerias.php;f11;41;5;46;;;;vpos;;v;;a;;r;;d4,42;;b1,0;;m,0;;e">
</treenode>
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\Galerias.php;f11;29;5;32;;;;vpos;;v;;a;;r;;d4,30;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="list;PHP:Function Name;Z:\Godoy\clases\Galerias.php;f4;63;5;81;;;;vpos;;v;;a;;r;;d27,63;;b0,0;;m,0;;efilter;;p">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\Galerias.php;f11;24;5;27;;;;vpos;;v;;a;;r;;d4,25;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
<treenode node="view;PHP:Function Name;Z:\Godoy\clases\Galerias.php;f11;55;5;61;;;;vpos;;v;;a;;r;;d4,56;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="Imagenes;PHP:Class Name;Z:\Godoy\clases\Imagenes.php;f0;6;1;109;;;;vpos;;v;;a;;r;;d0,7;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Imagenes.php;f11;17;5;20;;;;vpos;;v;;a;;r;;d4,18;;b1,0;;m,0;;e">
</treenode>
<treenode node="add;PHP:Function Name;Z:\Godoy\clases\Imagenes.php;f11;32;5;37;;;;vpos;;v;;a;;r;;d4,33;;b1,0;;m,0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;Z:\Godoy\clases\Imagenes.php;f11;46;5;55;;;;vpos;;v;;a;;r;;d4,47;;b1,0;;m,0;;e">
</treenode>
<treenode node="deleteAll;PHP:Function Name;Z:\Godoy\clases\Imagenes.php;f11;57;5;66;;;;vpos;;v;;a;;r;;d4,58;;b1,0;;m,0;;e">
</treenode>
<treenode node="edit;PHP:Function Name;Z:\Godoy\clases\Imagenes.php;f11;39;5;44;;;;vpos;;v;;a;;r;;d4,40;;b1,0;;m,0;;e">
</treenode>
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\Imagenes.php;f11;27;5;30;;;;vpos;;v;;a;;r;;d4,28;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="imagenesAdmin;PHP:Function Name;Z:\Godoy\clases\Imagenes.php;f11;96;5;107;;;;vpos;;v;;a;;r;;d4,97;;b1,0;;m,0;;e">
</treenode>
<treenode node="list;PHP:Function Name;Z:\Godoy\clases\Imagenes.php;f4;76;5;94;;;;vpos;;v;;a;;r;;d27,76;;b0,0;;m,0;;efilter;;p">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\Imagenes.php;f11;22;5;25;;;;vpos;;v;;a;;r;;d4,23;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
<treenode node="view;PHP:Function Name;Z:\Godoy\clases\Imagenes.php;f11;68;5;74;;;;vpos;;v;;a;;r;;d4,69;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="Novedades;PHP:Class Name;Z:\Godoy\clases\Novedades.php;f0;4;1;82;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Novedades.php;f11;19;5;22;;;;vpos;;v;;a;;r;;d4,20;;b1,0;;m,0;;e">
</treenode>
<treenode node="add;PHP:Function Name;Z:\Godoy\clases\Novedades.php;f11;34;5;39;;;;vpos;;v;;a;;r;;d4,35;;b1,0;;m,0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;Z:\Godoy\clases\Novedades.php;f11;48;5;53;;;;vpos;;v;;a;;r;;d4,49;;b1,0;;m,0;;e">
</treenode>
<treenode node="edit;PHP:Function Name;Z:\Godoy\clases\Novedades.php;f11;41;5;46;;;;vpos;;v;;a;;r;;d4,42;;b1,0;;m,0;;e">
</treenode>
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\Novedades.php;f11;29;5;32;;;;vpos;;v;;a;;r;;d4,30;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="list;PHP:Function Name;Z:\Godoy\clases\Novedades.php;f4;63;5;81;;;;vpos;;v;;a;;r;;d27,63;;b0,0;;m,0;;efilter;;p">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\Novedades.php;f11;24;5;27;;;;vpos;;v;;a;;r;;d4,25;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
<treenode node="view;PHP:Function Name;Z:\Godoy\clases\Novedades.php;f11;55;5;61;;;;vpos;;v;;a;;r;;d4,56;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="OAuth;PHP:Class Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\OAuth.php;f0;34;1;137;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class OAuth&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    OAuth - OAuth2 authentication wrapper class.&#10;Uses the oauth2-client package from the League of Extraordinary Packages.&#10;&lt;b&gt;see&lt;/b&gt;: http://oauth2-client.thephpleague.com&#10;&lt;b&gt;author&lt;/b&gt;: Marcus Bointon (Synchro/coolbru) &lt;phpmailer&#10;&lt;b&gt;synchromedia&lt;/b&gt;: .co.uk&gt;;;d0,35;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\OAuth.php;f11;85;5;92;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    OAuth constructor.&#10;Associative array containing&#10;`provider`, `userName`, `clientSecret`, `clientId` and `refreshToken` elements&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: Associative array containing `provider`, `userName`, `clientSecret`, `clientId` and `refreshToken` elements;;d4,86;;b1,0;;m,0;;earray $options;;p">
</treenode>
<treenode node="getGrant;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\OAuth.php;f14;99;5;102;;;;vpos;;v;;aRefreshToken;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getGrant()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a new RefreshToken.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,100;;b2,0;;m,0;;e">
</treenode>
<treenode node="getOauth64;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\OAuth.php;f11;122;5;136;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getOauth64()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Generate a base64-encoded OAuth token.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,123;;b1,0;;m,0;;e">
</treenode>
<treenode node="getToken;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\OAuth.php;f14;109;5;115;;;;vpos;;v;;aAccessToken;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getToken()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a new AccessToken.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,110;;b2,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="PHPMailer;PHP:Class Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f0;30;1;4419;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class PHPMailer&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    PHPMailer - PHP email creation and transport class.&#10;&lt;b&gt;author&lt;/b&gt;: Marcus Bointon (Synchro/coolbru) &lt;phpmailer&#10;&lt;b&gt;synchromedia&lt;/b&gt;: .co.uk&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Jim Jagielski (jimjag) &lt;jimjag&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Andy Prevost (codeworxtech) &lt;codeworxtech&#10;&lt;b&gt;users&lt;/b&gt;: .sourceforge.net&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Brent R. Matzelle (original founder);;d0,31;;b0,0;;m,0;;e">
<treenode node="MAX_LINE_LENGTH;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f9;706;25;706;;;;vposint;;v;;a;;r998;;d-1,-1;;b0,5;;m,0;;e">
</treenode>
<treenode node="STD_LINE_LENGTH;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f9;716;25;716;;;;vposint;;v;;a;;r76;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="STOP_CONTINUE;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f9;685;23;685;;;;vposint;;v;;a;;r1;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="STOP_CRITICAL;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f9;692;23;692;;;;vposint;;v;;a;;r2;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="STOP_MESSAGE;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f9;678;22;678;;;;vposint;;v;;a;;r0;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="VERSION;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f9;671;17;671;;;;vposstring;;v;;a;;r&apos;6.0.5&apos;;;d-1,-1;;b0,5;;m,0;;e">
</treenode>
<treenode node="DKIM_Add;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4240;5;4311;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    DKIM_Add($headers_line, $subject, $body)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create the DKIM header and body in a new message header.&#10;Header lines&#10;Subject&#10;Body&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$headers_line&lt;/b&gt;: Header lines&#10;    string &lt;b&gt;$subject&lt;/b&gt;: Subject&#10;    string &lt;b&gt;$body&lt;/b&gt;: Body;;d4,4241;;b1,0;;m,0;;estring $headers_line;;pstring $subject;;pstring $body;;p">
</treenode>
<treenode node="DKIM_BodyC;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4219;5;4229;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    DKIM_BodyC($body)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Generate a DKIM canonicalization body.&#10;Uses the &apos;simple&apos; algorithm from RFC6376 section 3.4.3.&#10;Canonicalized bodies should *always* use CRLF, regardless of mailer setting.&#10;&lt;b&gt;see&lt;/b&gt;: https://tools.ietf.org/html/rfc6376#section-3.4.3&#10;Message Body&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$body&lt;/b&gt;: Message Body;;d4,4220;;b1,0;;m,0;;estring $body;;p">
</treenode>
<treenode node="DKIM_HeaderC;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4177;5;4206;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    DKIM_HeaderC($signHeader)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Generate a DKIM canonicalization header.&#10;Uses the &apos;relaxed&apos; algorithm from RFC6376 section 3.4.2.&#10;Canonicalized headers should *always* use CRLF, regardless of mailer setting.&#10;&lt;b&gt;see&lt;/b&gt;: https://tools.ietf.org/html/rfc6376#section-3.4.2&#10;Header&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$signHeader&lt;/b&gt;: Header;;d4,4178;;b1,0;;m,0;;estring $signHeader;;p">
</treenode>
<treenode node="DKIM_QP;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4114;5;4128;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    DKIM_QP($txt)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Quoted-Printable-encode a DKIM header.&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$txt&lt;/b&gt;;;d4,4115;;b1,0;;m,0;;estring $txt;;p">
</treenode>
<treenode node="DKIM_Sign;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4139;5;4164;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    DKIM_Sign($signHeader)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Generate a DKIM signature.&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&lt;b&gt;return&lt;/b&gt;: The DKIM signature value&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$signHeader&lt;/b&gt;;;d4,4140;;b1,0;;m,0;;estring $signHeader;;p">
</treenode>
<treenode node="__construct;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;723;5;730;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct($exceptions = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Constructor.&#10;Should we throw external exceptions?&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$exceptions&lt;/b&gt;: Should we throw external exceptions?;;d4,724;;b1,0;;m,0;;ebool $exceptions;;p">
</treenode>
<treenode node="__destruct;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;735;5;739;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __destruct()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Destructor.;;d4,736;;b1,0;;m,0;;e">
</treenode>
<treenode node="_mime_types;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f18;3817;5;3938;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    _mime_types($ext = &apos;&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the MIME type for a file extension.&#10;File extension&#10;&lt;b&gt;return&lt;/b&gt;: MIME type of file&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$ext&lt;/b&gt;: File extension;;d4,3818;;b1,5;;m,0;;estring $ext;;p">
</treenode>
<treenode node="addAddress;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;899;5;902;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addAddress($address, $name = &apos;&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add a &quot;To&quot; address.&#10;The email address to send to&#10;&lt;b&gt;return&lt;/b&gt;: true on success, false if address already used or invalid in some way&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$address&lt;/b&gt;: The email address to send to&#10;    string &lt;b&gt;$name&lt;/b&gt;;;d4,900;;b1,0;;m,0;;estring $address;;pstring $name;;p">
</treenode>
<treenode node="addAnAddress;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;1012;5;1055;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addAnAddress($kind, $address, $name = &apos;&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add an address to one of the recipient arrays or to the ReplyTo array.&#10;Addresses that have been added already return false, but do not throw exceptions.&#10;One of &apos;to&apos;, &apos;cc&apos;, &apos;bcc&apos;, or &apos;ReplyTo&apos;&#10;The email address to send, resp. to reply to&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&lt;b&gt;return&lt;/b&gt;: true on success, false if address already used or invalid in some way&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$kind&lt;/b&gt;: One of &apos;to&apos;, &apos;cc&apos;, &apos;bcc&apos;, or &apos;ReplyTo&apos;&#10;    string &lt;b&gt;$address&lt;/b&gt;: The email address to send, resp. to reply to&#10;    string &lt;b&gt;$name&lt;/b&gt;;;d4,1013;;b2,0;;m,0;;estring $kind;;pstring $address;;pstring $name;;p">
</treenode>
<treenode node="addAttachment;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2756;5;2794;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addAttachment($path, $name = &apos;&apos;, $encoding = &apos;base64&apos;, $type = &apos;&apos;, $disposition = &apos;attachment&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add an attachment from a path on the filesystem.&#10;Never use a user-supplied path to a file!&#10;Returns false if the file could not be found or read.&#10;Path to the attachment&#10;Overrides the attachment name&#10;File encoding (see $Encoding)&#10;File extension (MIME) type&#10;Disposition to use&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: Path to the attachment&#10;    string &lt;b&gt;$name&lt;/b&gt;: Overrides the attachment name&#10;    string &lt;b&gt;$encoding&lt;/b&gt;: File encoding (see $Encoding)&#10;    string &lt;b&gt;$type&lt;/b&gt;: File extension (MIME) type&#10;    string &lt;b&gt;$disposition&lt;/b&gt;: Disposition to use;;d4,2757;;b1,0;;m,0;;estring $path;;pstring $name;;pstring $encoding;;pstring $type;;pstring $disposition;;p">
</treenode>
<treenode node="addBCC;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;925;5;928;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addBCC($address, $name = &apos;&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add a &quot;BCC&quot; address.&#10;The email address to send to&#10;&lt;b&gt;return&lt;/b&gt;: true on success, false if address already used or invalid in some way&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$address&lt;/b&gt;: The email address to send to&#10;    string &lt;b&gt;$name&lt;/b&gt;;;d4,926;;b1,0;;m,0;;estring $address;;pstring $name;;p">
</treenode>
<treenode node="addCC;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;912;5;915;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addCC($address, $name = &apos;&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add a &quot;CC&quot; address.&#10;The email address to send to&#10;&lt;b&gt;return&lt;/b&gt;: true on success, false if address already used or invalid in some way&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$address&lt;/b&gt;: The email address to send to&#10;    string &lt;b&gt;$name&lt;/b&gt;;;d4,913;;b1,0;;m,0;;estring $address;;pstring $name;;p">
</treenode>
<treenode node="addCustomHeader;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3652;5;3660;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addCustomHeader($name, $value = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add a custom header.&#10;$name value can be overloaded to contain&#10;both header name and value (name:value).&#10;Custom header name&#10;Header value&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: Custom header name&#10;    string|null &lt;b&gt;$value&lt;/b&gt;: Header value;;d4,3653;;b1,0;;m,0;;estring $name;;pstring|null $value;;p">
</treenode>
<treenode node="addEmbeddedImage;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3280;5;3311;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addEmbeddedImage($path, $cid, $name = &apos;&apos;, $encoding = &apos;base64&apos;, $type = &apos;&apos;, $disposition = &apos;inline&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add an embedded (inline) attachment from a file.&#10;This can include images, sounds, and just about any other document type.&#10;These differ from &apos;regular&apos; attachments in that they are intended to be&#10;displayed inline with the message, not just attached for download.&#10;This is used in HTML messages that embed the images&#10;the HTML refers to using the $cid value.&#10;Never use a user-supplied path to a file!&#10;Path to the attachment&#10;Content ID of the attachment;s Use this to reference&#10;the content when using an embedded image in HTML&#10;Overrides the attachment name&#10;File encoding (see $Encoding)&#10;File MIME type&#10;Disposition to use&#10;&lt;b&gt;return&lt;/b&gt;: True on successfully adding an attachment&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: Path to the attachment&#10;    string &lt;b&gt;$cid&lt;/b&gt;: Content ID of the attachment;s Use this to reference the content when using an embedded image in HTML&#10;    string &lt;b&gt;$name&lt;/b&gt;: Overrides the attachment name&#10;    string &lt;b&gt;$encoding&lt;/b&gt;: File encoding (see $Encoding)&#10;    string &lt;b&gt;$type&lt;/b&gt;: File MIME type&#10;    string &lt;b&gt;$disposition&lt;/b&gt;: Disposition to use;;d4,3281;;b1,0;;m,0;;estring $path;;pstring $cid;;pstring $name;;pstring $encoding;;pstring $type;;pstring $disposition;;p">
</treenode>
<treenode node="addOrEnqueueAnAddress;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;957;5;998;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addOrEnqueueAnAddress($kind, $address, $name)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add an address to one of the recipient arrays or to the ReplyTo array. Because PHPMailer&#10;can&apos;t validate addresses with an IDN without knowing the PHPMailer::$CharSet (that can still&#10;be modified after calling this function), addition of such addresses is delayed until send().&#10;Addresses that have been added already return false, but do not throw exceptions.&#10;One of &apos;to&apos;, &apos;cc&apos;, &apos;bcc&apos;, or &apos;ReplyTo&apos;&#10;The email address to send, resp. to reply to&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&lt;b&gt;return&lt;/b&gt;: true on success, false if address already used or invalid in some way&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$kind&lt;/b&gt;: One of &apos;to&apos;, &apos;cc&apos;, &apos;bcc&apos;, or &apos;ReplyTo&apos;&#10;    string &lt;b&gt;$address&lt;/b&gt;: The email address to send, resp. to reply to&#10;    string &lt;b&gt;$name&lt;/b&gt;;;d4,958;;b2,0;;m,0;;estring $kind;;pstring $address;;pstring $name;;p">
</treenode>
<treenode node="addReplyTo;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;938;5;941;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addReplyTo($address, $name = &apos;&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add a &quot;Reply-To&quot; address.&#10;The email address to reply to&#10;&lt;b&gt;return&lt;/b&gt;: true on success, false if address already used or invalid in some way&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$address&lt;/b&gt;: The email address to reply to&#10;    string &lt;b&gt;$name&lt;/b&gt;;;d4,939;;b1,0;;m,0;;estring $address;;pstring $name;;p">
</treenode>
<treenode node="addStringAttachment;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3237;5;3259;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addStringAttachment(&#10;        $string,&#10;        $filename,&#10;        $encoding = &apos;base64&apos;,&#10;        $type = &apos;&apos;,&#10;        $disposition = &apos;attachment&apos;&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add a string or binary attachment (non-filesystem).&#10;This method can be used to attach ascii or binary data,&#10;such as a BLOB record from a database.&#10;String attachment data&#10;Name of the attachment&#10;File encoding (see $Encoding)&#10;File extension (MIME) type&#10;Disposition to use&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$string&lt;/b&gt;: String attachment data&#10;    string &lt;b&gt;$filename&lt;/b&gt;: Name of the attachment&#10;    string &lt;b&gt;$encoding&lt;/b&gt;: File encoding (see $Encoding)&#10;    string &lt;b&gt;$type&lt;/b&gt;: File extension (MIME) type&#10;    string &lt;b&gt;$disposition&lt;/b&gt;: Disposition to use;;d6,3243;;b1,0;;m,0;;estring $string;;pstring $filename;;pstring $encoding;;pstring $type;;pstring $disposition;;p">
</treenode>
<treenode node="addStringEmbeddedImage;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3330;5;3356;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addStringEmbeddedImage(&#10;        $string,&#10;        $cid,&#10;        $name = &apos;&apos;,&#10;        $encoding = &apos;base64&apos;,&#10;        $type = &apos;&apos;,&#10;        $disposition = &apos;inline&apos;&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add an embedded stringified attachment.&#10;This can include images, sounds, and just about any other document type.&#10;If your filename doesn&apos;t contain an extension, be sure to set the $type to an appropriate MIME type.&#10;The attachment binary data&#10;Content ID of the attachment;s Use this to reference&#10;the content when using an embedded image in HTML&#10;A filename for the attachment. If this contains an extension,&#10;PHPMailer will attempt to set a MIME type for the attachment.&#10;For example &apos;file.jpg&apos; would get an &apos;image/jpeg&apos; MIME type.&#10;File encoding (see $Encoding), defaults to &apos;base64&apos;&#10;MIME type - will be used in preference to any automatically derived type&#10;Disposition to use&#10;&lt;b&gt;return&lt;/b&gt;: True on successfully adding an attachment&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$string&lt;/b&gt;: The attachment binary data&#10;    string &lt;b&gt;$cid&lt;/b&gt;: Content ID of the attachment;s Use this to reference the content when using an embedded image in HTML&#10;    string &lt;b&gt;$name&lt;/b&gt;: A filename for the attachment. If this contains an extension, PHPMailer will attempt to set a MIME type for the attachment. For example &apos;file.jpg&apos; would get an &apos;image/jpeg&apos; MIME type.&#10;    string &lt;b&gt;$encoding&lt;/b&gt;: File encoding (see $Encoding), defaults to &apos;base64&apos;&#10;    string &lt;b&gt;$type&lt;/b&gt;: MIME type - will be used in preference to any automatically derived type&#10;    string &lt;b&gt;$disposition&lt;/b&gt;: Disposition to use;;d6,3337;;b1,0;;m,0;;estring $string;;pstring $cid;;pstring $name;;pstring $encoding;;pstring $type;;pstring $disposition;;p">
</treenode>
<treenode node="addrAppend;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2041;5;2049;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addrAppend($type, $addr)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create recipient headers.&#10;An array of recipients,&#10;where each recipient is a 2-element indexed array with element 0 containing an address&#10;and element 1 containing a name, like:&#10;[[&apos;joe&#10;&lt;b&gt;example&lt;/b&gt;: .com&apos;, &apos;Joe User&apos;], [&apos;zoe&#10;&lt;b&gt;example&lt;/b&gt;: .com&apos;, &apos;Zoe User&apos;]]&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$type&lt;/b&gt;&#10;    array &lt;b&gt;$addr&lt;/b&gt;: An array of recipients, where each recipient is a 2-element indexed array with element 0 containing an address and element 1 containing a name, like: [[&apos;joe;;d4,2042;;b1,0;;m,0;;estring $type;;parray $addr;;p">
</treenode>
<treenode node="addrFormat;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2059;5;2068;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    addrFormat($addr)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format an address for use in a message header.&#10;A 2-element indexed array, element 0 containing an address, element 1 containing a name like&#10;[&apos;joe&#10;&lt;b&gt;example&lt;/b&gt;: .com&apos;, &apos;Joe User&apos;]&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$addr&lt;/b&gt;: A 2-element indexed array, element 0 containing an address, element 1 containing a name like [&apos;joe;;d4,2060;;b1,0;;m,0;;earray $addr;;p">
</treenode>
<treenode node="alternativeExists;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3413;5;3416;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    alternativeExists()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check if this message has an alternative body set.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,3414;;b1,0;;m,0;;e">
</treenode>
<treenode node="attachAll;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;2815;5;2925;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    attachAll($disposition_type, $boundary)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Attach all file, string, and binary attachments to the message.&#10;Returns an empty string on failure.&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$disposition_type&lt;/b&gt;&#10;    string &lt;b&gt;$boundary&lt;/b&gt;;;d4,2816;;b2,0;;m,0;;estring $disposition_type;;pstring $boundary;;p">
</treenode>
<treenode node="attachmentExists;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3397;5;3406;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    attachmentExists()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check if an attachment (non-inline) is present.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,3398;;b1,0;;m,0;;e">
</treenode>
<treenode node="base64EncodeWrapMB;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3127;5;3157;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    base64EncodeWrapMB($str, $linebreak = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encode and wrap long multibyte strings for mail headers&#10;without breaking lines within a character.&#10;Adapted from a function by paravoid.&#10;&lt;b&gt;see&lt;/b&gt;: http://www.php.net/manual/en/function.mb-encode-mimeheader.php#60283&#10;multi-byte text to wrap encode&#10;string to use as linefeed/end-of-line&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$str&lt;/b&gt;: multi-byte text to wrap encode&#10;    string &lt;b&gt;$linebreak&lt;/b&gt;: string to use as linefeed/end-of-line;;d4,3128;;b1,0;;m,0;;estring $str;;pstring $linebreak;;p">
</treenode>
<treenode node="cidExists;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;3365;5;3374;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    cidExists($cid)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check if an embedded attachment is present with this cid.&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$cid&lt;/b&gt;;;d4,3366;;b2,0;;m,0;;estring $cid;;p">
</treenode>
<treenode node="clearAddresses;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3436;5;3443;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clearAddresses()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clear all To recipients.;;d4,3437;;b1,0;;m,0;;e">
</treenode>
<treenode node="clearAllRecipients;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3481;5;3488;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clearAllRecipients()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clear all recipient types.;;d4,3482;;b1,0;;m,0;;e">
</treenode>
<treenode node="clearAttachments;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3493;5;3496;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clearAttachments()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clear all filesystem, string, and binary attachments.;;d4,3494;;b1,0;;m,0;;e">
</treenode>
<treenode node="clearBCCs;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3460;5;3467;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clearBCCs()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clear all BCC recipients.;;d4,3461;;b1,0;;m,0;;e">
</treenode>
<treenode node="clearCCs;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3448;5;3455;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clearCCs()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clear all CC recipients.;;d4,3449;;b1,0;;m,0;;e">
</treenode>
<treenode node="clearCustomHeaders;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3501;5;3504;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clearCustomHeaders()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clear all custom headers.;;d4,3502;;b1,0;;m,0;;e">
</treenode>
<treenode node="clearQueuedAddresses;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3423;5;3431;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clearQueuedAddresses($kind)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clear queued addresses of given kind.&#10;&apos;to&apos;, &apos;cc&apos;, or &apos;bcc&apos;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$kind&lt;/b&gt;: &apos;to&apos;, &apos;cc&apos;, or &apos;bcc&apos;;;d4,3424;;b1,0;;m,0;;estring $kind;;p">
</treenode>
<treenode node="clearReplyTos;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3472;5;3476;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    clearReplyTos()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Clear all ReplyTo recipients.;;d4,3473;;b1,0;;m,0;;e">
</treenode>
<treenode node="createBody;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2435;5;2645;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createBody()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Assemble the message body.&#10;Returns an empty string on failure.&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&lt;b&gt;return&lt;/b&gt;: The assembled message body;;d4,2436;;b1,0;;m,0;;e">
</treenode>
<treenode node="createHeader;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2250;5;2338;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    createHeader()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Assemble message headers.&#10;&lt;b&gt;return&lt;/b&gt;: The assembled headers;;d4,2251;;b1,0;;m,0;;e">
</treenode>
<treenode node="doCallback;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;4393;5;4398;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    doCallback($isSent, $to, $cc, $bcc, $subject, $body, $from, $extra)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Perform a callback.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$isSent&lt;/b&gt;&#10;    array &lt;b&gt;$to&lt;/b&gt;&#10;    array &lt;b&gt;$cc&lt;/b&gt;&#10;    array &lt;b&gt;$bcc&lt;/b&gt;&#10;    string &lt;b&gt;$subject&lt;/b&gt;&#10;    string &lt;b&gt;$body&lt;/b&gt;&#10;    string &lt;b&gt;$from&lt;/b&gt;&#10;    array &lt;b&gt;$extra&lt;/b&gt;;;d4,4394;;b2,0;;m,0;;ebool $isSent;;parray $to;;parray $cc;;parray $bcc;;pstring $subject;;pstring $body;;pstring $from;;parray $extra;;p">
</treenode>
<treenode node="edebug;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;782;5;829;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    edebug($str)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Output debugging info via user-defined method.&#10;Only generates output if SMTP debug output is enabled (&#10;&lt;b&gt;see&lt;/b&gt;: SMTP::$do_debug).&#10;&lt;b&gt;see&lt;/b&gt;: PHPMailer::$Debugoutput&#10;&lt;b&gt;see&lt;/b&gt;: PHPMailer::$SMTPDebug&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$str&lt;/b&gt;;;d4,783;;b2,0;;m,0;;estring $str;;p">
</treenode>
<treenode node="encodeFile;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;2938;5;2956;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    encodeFile($path, $encoding = &apos;base64&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encode a file attachment in requested format.&#10;Returns an empty string on failure.&#10;The full path to the file&#10;The encoding to use;s one of &apos;base64&apos;, &apos;7bit&apos;, &apos;8bit&apos;, &apos;binary&apos;, &apos;quoted-printable&apos;&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: The full path to the file&#10;    string &lt;b&gt;$encoding&lt;/b&gt;: The encoding to use;s one of &apos;base64&apos;, &apos;7bit&apos;, &apos;8bit&apos;, &apos;binary&apos;, &apos;quoted-printable&apos;;;d4,2939;;b2,0;;m,0;;estring $path;;pstring $encoding;;p">
</treenode>
<treenode node="encodeHeader;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3010;5;3084;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    encodeHeader($str, $position = &apos;text&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encode a header value (not including its label) optimally.&#10;Picks shortest of Q, B, or none. Result includes folding if needed.&#10;See RFC822 definitions for phrase, comment and text positions.&#10;The header value to encode&#10;What context the string will be used in&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$str&lt;/b&gt;: The header value to encode&#10;    string &lt;b&gt;$position&lt;/b&gt;: What context the string will be used in;;d4,3011;;b1,0;;m,0;;estring $str;;pstring $position;;p">
</treenode>
<treenode node="encodeQ;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3182;5;3224;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    encodeQ($str, $position = &apos;text&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encode a string using Q encoding.&#10;&lt;b&gt;see&lt;/b&gt;: http://tools.ietf.org/html/rfc2047#section-4.2&#10;the text to encode&#10;Where the text is going to be used, see the RFC for what that means&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$str&lt;/b&gt;: the text to encode&#10;    string &lt;b&gt;$position&lt;/b&gt;: Where the text is going to be used, see the RFC for what that means;;d4,3183;;b1,0;;m,0;;estring $str;;pstring $position;;p">
</treenode>
<treenode node="encodeQP;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3167;5;3170;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    encodeQP($string)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encode a string in quoted-printable format.&#10;According to RFC2045 section 6.7.&#10;The text to encode&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$string&lt;/b&gt;: The text to encode;;d4,3168;;b1,0;;m,0;;estring $string;;p">
</treenode>
<treenode node="encodeString;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2967;5;2998;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    encodeString($str, $encoding = &apos;base64&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Encode a string in requested format.&#10;Returns an empty string on failure.&#10;The text to encode&#10;The encoding to use;s one of &apos;base64&apos;, &apos;7bit&apos;, &apos;8bit&apos;, &apos;binary&apos;, &apos;quoted-printable&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$str&lt;/b&gt;: The text to encode&#10;    string &lt;b&gt;$encoding&lt;/b&gt;: The encoding to use;s one of &apos;base64&apos;, &apos;7bit&apos;, &apos;8bit&apos;, &apos;binary&apos;, &apos;quoted-printable;;d4,2968;;b1,0;;m,0;;estring $str;;pstring $encoding;;p">
</treenode>
<treenode node="endBoundary;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;2688;5;2691;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    endBoundary($boundary)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the end of a message boundary.&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$boundary&lt;/b&gt;;;d4,2689;;b2,0;;m,0;;estring $boundary;;p">
</treenode>
<treenode node="filenameToType;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f18;3948;5;3958;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    filenameToType($filename)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Map a file name to a MIME type.&#10;Defaults to &apos;application/octet-stream&apos;, i.e.. arbitrary binary data.&#10;A file name or full path, does not need to exist as a file&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$filename&lt;/b&gt;: A file name or full path, does not need to exist as a file;;d4,3949;;b1,5;;m,0;;estring $filename;;p">
</treenode>
<treenode node="generateId;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;2411;5;2425;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    generateId()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a unique ID to use for boundaries.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,2412;;b2,0;;m,0;;e">
</treenode>
<treenode node="getAllRecipientAddresses;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4376;5;4379;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getAllRecipientAddresses()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Allows for public read access to &apos;all_recipients&apos; property.&#10;Before the send() call, queued addresses (i.e. with IDN) are not yet included.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,4377;;b1,0;;m,0;;e">
</treenode>
<treenode node="getAttachments;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2801;5;2804;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getAttachments()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the array of attachments.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,2802;;b1,0;;m,0;;e">
</treenode>
<treenode node="getBccAddresses;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4354;5;4357;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getBccAddresses()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Allows for public read access to &apos;bcc&apos; property.&#10;Before the send() call, queued addresses (i.e. with IDN) are not yet included.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,4355;;b1,0;;m,0;;e">
</treenode>
<treenode node="getBoundary;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;2657;5;2679;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getBoundary($boundary, $charSet, $contentType, $encoding)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the start of a message boundary.&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$boundary&lt;/b&gt;&#10;    string &lt;b&gt;$charSet&lt;/b&gt;&#10;    string &lt;b&gt;$contentType&lt;/b&gt;&#10;    string &lt;b&gt;$encoding&lt;/b&gt;;;d4,2658;;b2,0;;m,0;;estring $boundary;;pstring $charSet;;pstring $contentType;;pstring $encoding;;p">
</treenode>
<treenode node="getCcAddresses;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4343;5;4346;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCcAddresses()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Allows for public read access to &apos;cc&apos; property.&#10;Before the send() call, queued addresses (i.e. with IDN) are not yet included.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,4344;;b1,0;;m,0;;e">
</treenode>
<treenode node="getCustomHeaders;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3667;5;3670;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getCustomHeaders()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns all custom headers.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,3668;;b1,0;;m,0;;e">
</treenode>
<treenode node="getLE;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f18;4076;5;4079;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLE()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the current line break format string.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,4077;;b1,5;;m,0;;e">
</treenode>
<treenode node="getLastMessageID;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;1166;5;1169;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLastMessageID()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return the Message-ID header of the last email.&#10;Technically this is the value from the last time the headers were created,&#10;but it&apos;s also the message ID of the last sent message except in&#10;pathological cases.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,1167;;b1,0;;m,0;;e">
</treenode>
<treenode node="getMailMIME;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2345;5;2390;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getMailMIME()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the message MIME type headers.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,2346;;b1,0;;m,0;;e">
</treenode>
<treenode node="getOAuth;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4405;5;4408;;;;vpos;;v;;aOAuth;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getOAuth()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the OAuth instance.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,4406;;b1,0;;m,0;;e">
</treenode>
<treenode node="getReplyToAddresses;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4365;5;4368;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getReplyToAddresses()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Allows for public read access to &apos;ReplyTo&apos; property.&#10;Before the send() call, queued addresses (i.e. with IDN) are not yet included.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,4366;;b1,0;;m,0;;e">
</treenode>
<treenode node="getSMTPInstance;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;1683;5;1690;;;;vpos;;v;;aSMTP;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSMTPInstance()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get an instance to use for SMTP operations.&#10;Override this function to load your own SMTP implementation,&#10;or set one with setSMTPInstance.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,1684;;b1,0;;m,0;;e">
</treenode>
<treenode node="getSentMIMEMessage;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2401;5;2404;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getSentMIMEMessage()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the whole MIME message.&#10;Includes complete headers and body.&#10;Only valid post preSend().&#10;&lt;b&gt;see&lt;/b&gt;: PHPMailer::preSend()&#10;&lt;b&gt;return&lt;/b&gt;;;d4,2402;;b1,0;;m,0;;e">
</treenode>
<treenode node="getToAddresses;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4332;5;4335;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getToAddresses()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Allows for public read access to &apos;to&apos; property.&#10;Before the send() call, queued addresses (i.e. with IDN) are not yet included.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,4333;;b1,0;;m,0;;e">
</treenode>
<treenode node="getTranslations;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2025;5;2028;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getTranslations()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the array of strings for the current language.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,2026;;b1,0;;m,0;;e">
</treenode>
<treenode node="has8bitChars;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3110;5;3113;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    has8bitChars($text)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Does a string contain any 8-bit chars (in any charset)?&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$text&lt;/b&gt;;;d4,3111;;b1,0;;m,0;;estring $text;;p">
</treenode>
<treenode node="hasLineLongerThanMax;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f18;4321;5;4324;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasLineLongerThanMax($str)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Detect if a string contains a line longer than the maximum line length&#10;allowed by RFC 2822 section 2.1.1.&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$str&lt;/b&gt;;;d4,4322;;b1,5;;m,0;;estring $str;;p">
</treenode>
<treenode node="hasMultiBytes;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3093;5;3101;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hasMultiBytes($str)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check if a string contains multi-byte characters.&#10;multi-byte text to wrap encode&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$str&lt;/b&gt;: multi-byte text to wrap encode;;d4,3094;;b1,0;;m,0;;estring $str;;p">
</treenode>
<treenode node="headerLine;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2724;5;2727;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    headerLine($name, $value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Format a header line.&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;&#10;    string|int &lt;b&gt;$value&lt;/b&gt;;;d4,2725;;b1,0;;m,0;;estring $name;;pstring|int $value;;p">
</treenode>
<treenode node="html2text;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3797;5;3808;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    html2text($html, $advanced = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert an HTML string into plain text.&#10;This is used by msgHTML().&#10;Note - older versions of this function used a bundled advanced converter&#10;which was removed for license reasons in #232.&#10;Example usage:&#10;```php&#10;// Use default conversion&#10;$plain = $mail-&gt;html2text($html);s&#10;// Use your own custom converter&#10;$plain = $mail-&gt;html2text($html, function($html) {&#10;$converter = new MyHtml2text($html);s&#10;return $converter-&gt;get_text();s&#10;});s&#10;```&#10;The HTML text to convert&#10;Any boolean value to use the internal converter,&#10;or provide your own callable for custom conversion&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$html&lt;/b&gt;: The HTML text to convert&#10;    bool|callable &lt;b&gt;$advanced&lt;/b&gt;: Any boolean value to use the internal converter, or provide your own callable for custom conversion;;d4,3798;;b1,0;;m,0;;estring $html;;pbool|callable $advanced;;p">
</treenode>
<treenode node="idnSupported;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f18;1261;5;1264;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    idnSupported()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Tells whether IDNs (Internationalized Domain Names) are supported or not. This requires the&#10;`intl` and `mbstring` PHP extensions.&#10;&lt;b&gt;return&lt;/b&gt;: `true` if required functions for IDN support are present;;d4,1262;;b1,5;;m,0;;e">
</treenode>
<treenode node="inlineImageExists;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3381;5;3390;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    inlineImageExists()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check if an inline attachment is present.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,3382;;b1,0;;m,0;;e">
</treenode>
<treenode node="isError;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3639;5;3642;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isError()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check if an error occurred.&#10;&lt;b&gt;return&lt;/b&gt;: True if an error did occur;;d4,3640;;b1,0;;m,0;;e">
</treenode>
<treenode node="isHTML;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;836;5;843;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isHTML($isHtml = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sets message type to HTML or plain.&#10;True for HTML mode&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$isHtml&lt;/b&gt;: True for HTML mode;;d4,837;;b1,0;;m,0;;ebool $isHtml;;p">
</treenode>
<treenode node="isMail;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;856;5;859;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isMail()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send messages using PHP&apos;s mail() function.;;d4,857;;b1,0;;m,0;;e">
</treenode>
<treenode node="isQmail;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;879;5;889;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isQmail()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send messages using qmail.;;d4,880;;b1,0;;m,0;;e">
</treenode>
<treenode node="isSMTP;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;848;5;851;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isSMTP()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send messages using SMTP.;;d4,849;;b1,0;;m,0;;e">
</treenode>
<treenode node="isSendmail;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;864;5;874;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isSendmail()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send messages using $Sendmail.;;d4,865;;b1,0;;m,0;;e">
</treenode>
<treenode node="isShellSafe;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f21;1593;5;1616;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isShellSafe($string)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fix CVE-2016-10033 and CVE-2016-10045 by disallowing potentially unsafe shell characters.&#10;Note that escapeshellarg and escapeshellcmd are inadequate for our purposes, especially on Windows.&#10;&lt;b&gt;see&lt;/b&gt;: https://github.com/PHPMailer/PHPMailer/issues/924 CVE-2016-10045 bug report&#10;The string to be validated&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$string&lt;/b&gt;: The string to be validated;;d4,1594;;b2,5;;m,0;;estring $string;;p">
</treenode>
<treenode node="isValidHost;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f18;3579;5;3604;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    isValidHost($host)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Validate whether a string contains a valid value to use as a hostname or IP address.&#10;IPv6 addresses must include [], e.g. `[::1]`, not just `::1`.&#10;The host name or IP address to check&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$host&lt;/b&gt;: The host name or IP address to check;;d4,3580;;b1,5;;m,0;;estring $host;;p">
</treenode>
<treenode node="lang;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;3613;5;3632;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    lang($key)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get an error message in the current language.&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$key&lt;/b&gt;;;d4,3614;;b2,0;;m,0;;estring $key;;p">
</treenode>
<treenode node="mailPassthru;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f12;755;5;771;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    mailPassthru($to, $subject, $body, $header, $params)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Call mail() in a safe_mode-aware fashion.&#10;Also, unless sendmail_path points to sendmail (or something that&#10;claims to be sendmail), don&apos;t pass params (not a perfect fix,&#10;but it will do).&#10;To&#10;Subject&#10;Message Body&#10;Additional Header(s)&#10;Params&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$to&lt;/b&gt;: To&#10;    string &lt;b&gt;$subject&lt;/b&gt;: Subject&#10;    string &lt;b&gt;$body&lt;/b&gt;: Message Body&#10;    string &lt;b&gt;$header&lt;/b&gt;: Additional Header(s)&#10;    string|null &lt;b&gt;$params&lt;/b&gt;: Params;;d4,756;;b3,0;;m,0;;estring $to;;pstring $subject;;pstring $body;;pstring $header;;pstring|null $params;;p">
</treenode>
<treenode node="mailSend;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;1630;5;1674;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    mailSend($header, $body)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send mail using the PHP mail() function.&#10;&lt;b&gt;see&lt;/b&gt;: http://www.php.net/manual/en/book.mail.php&#10;The message headers&#10;The message body&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$header&lt;/b&gt;: The message headers&#10;    string &lt;b&gt;$body&lt;/b&gt;: The message body;;d4,1631;;b2,0;;m,0;;estring $header;;pstring $body;;p">
</treenode>
<treenode node="mb_pathinfo;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f18;3972;5;4006;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    mb_pathinfo($path, $options = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Multi-byte-safe pathinfo replacement.&#10;Drop-in replacement for pathinfo(), but multibyte- and cross-platform-safe.&#10;&lt;b&gt;see&lt;/b&gt;: http://www.php.net/manual/en/function.pathinfo.php#107461&#10;A filename or path, does not need to exist as a file&#10;Either a PATHINFO_* constant,&#10;or a string name to return only the specified piece&#10;&lt;b&gt;return&lt;/b&gt;: |array&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$path&lt;/b&gt;: A filename or path, does not need to exist as a file&#10;    int|string &lt;b&gt;$options&lt;/b&gt;: Either a PATHINFO_* constant, or a string name to return only the specified piece;;d4,3973;;b1,5;;m,0;;estring $path;;pint|string $options;;p">
</treenode>
<treenode node="msgHTML;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;3690;5;3772;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    msgHTML($message, $basedir = &apos;&apos;, $advanced = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a message body from an HTML string.&#10;Automatically inlines images and creates a plain-text version by converting the HTML,&#10;overwriting any existing values in Body and AltBody.&#10;Do not source $message content from user input!&#10;$basedir is prepended when handling relative URLs, e.g. &lt;img src=&quot;/images/a.png&quot;&gt; and must not be empty&#10;will look for an image file in $basedir/images/a.png and convert it to inline.&#10;If you don&apos;t provide a $basedir, relative paths will be left untouched (and thus probably break in email)&#10;Converts data-uri images into embedded attachments.&#10;If you don&apos;t want to apply these transformations to your HTML, just set Body and AltBody directly.&#10;HTML message string&#10;Absolute path to a base directory to prepend to relative paths to images&#10;Whether to use the internal HTML to text converter&#10;or your own custom converter&#10;&lt;b&gt;see&lt;/b&gt;: PHPMailer::html2text()&#10;&lt;b&gt;return&lt;/b&gt;: $message The transformed message Body&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: HTML message string&#10;    string &lt;b&gt;$basedir&lt;/b&gt;: Absolute path to a base directory to prepend to relative paths to images&#10;    bool|callable &lt;b&gt;$advanced&lt;/b&gt;: Whether to use the internal HTML to text converter or your own custom converter;;d4,3691;;b1,0;;m,0;;estring $message;;pstring $basedir;;pbool|callable $advanced;;p">
</treenode>
<treenode node="normalizeBreaks;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f18;4056;5;4069;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    normalizeBreaks($text, $breaktype = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Normalize line breaks in a string.&#10;Converts UNIX LF, Mac CR and Windows CRLF line breaks into a single line break format.&#10;Defaults to CRLF (for message bodies) and preserves consecutive breaks.&#10;What kind of line break to use;s defaults to static::$LE&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$text&lt;/b&gt;&#10;    string &lt;b&gt;$breaktype&lt;/b&gt;: What kind of line break to use;s defaults to static::$LE;;d4,4057;;b1,5;;m,0;;estring $text;;pstring $breaktype;;p">
</treenode>
<treenode node="parseAddresses;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f18;1070;5;1114;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parseAddresses($addrstr, $useimap = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parse and validate a string containing one or more RFC822-style comma-separated email addresses&#10;of the form &quot;display name &lt;address&gt;&quot; into an array of name/address pairs.&#10;Uses the imap_rfc822_parse_adrlist function if the IMAP extension is available.&#10;Note that quotes in the name part are removed.&#10;&lt;b&gt;see&lt;/b&gt;: http://www.andrew.cmu.edu/user/agreen1/testing/mrbs/web/Mail/RFC822.php A more careful implementation&#10;The address list string&#10;Whether to use the IMAP extension to parse the list&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$addrstr&lt;/b&gt;: The address list string&#10;    bool &lt;b&gt;$useimap&lt;/b&gt;: Whether to use the IMAP extension to parse the list;;d4,1071;;b1,5;;m,0;;estring $addrstr;;pbool $useimap;;p">
</treenode>
<treenode node="postSend;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;1471;5;1500;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    postSend()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Actually send a message via the selected mechanism.&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&lt;b&gt;return&lt;/b&gt;;;d4,1472;;b1,0;;m,0;;e">
</treenode>
<treenode node="preSend;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;1338;5;1462;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    preSend()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Prepare a message for sending.&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&lt;b&gt;return&lt;/b&gt;;;d4,1339;;b1,0;;m,0;;e">
</treenode>
<treenode node="punyencodeAddress;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;1280;5;1302;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    punyencodeAddress($address)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Converts IDN in given email address to its ASCII form, also known as punycode, if possible.&#10;Important: Address must be passed in same encoding as currently set in PHPMailer::$CharSet.&#10;This function silently returns unmodified address if:&#10;- No conversion is necessary (i.e. domain name is not an IDN, or is already in ASCII form)&#10;- Conversion to punycode is impossible (e.g. required PHP functions are not available)&#10;or fails for any reason (e.g. domain contains characters not allowed in an IDN).&#10;&lt;b&gt;see&lt;/b&gt;: PHPMailer::$CharSet&#10;The email address to convert&#10;&lt;b&gt;return&lt;/b&gt;: The encoded address in ASCII form&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$address&lt;/b&gt;: The email address to convert;;d4,1281;;b1,0;;m,0;;estring $address;;p">
</treenode>
<treenode node="rfcDate;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f18;3537;5;3544;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rfcDate()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return an RFC 822 formatted date.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,3538;;b1,5;;m,0;;e">
</treenode>
<treenode node="secureHeader;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4041;5;4044;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    secureHeader($str)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Strip newlines to prevent header injection.&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$str&lt;/b&gt;;;d4,4042;;b1,0;;m,0;;estring $str;;p">
</treenode>
<treenode node="send;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;1312;5;1329;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    send()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Create a message and send it.&#10;Uses the sending method specified by $Mailer.&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&lt;b&gt;return&lt;/b&gt;: false on error - See the ErrorInfo property for details of the error;;d4,1313;;b1,0;;m,0;;e">
</treenode>
<treenode node="sendmailSend;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;1514;5;1581;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sendmailSend($header, $body)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send mail using the $Sendmail program.&#10;&lt;b&gt;see&lt;/b&gt;: PHPMailer::$Sendmail&#10;The message headers&#10;The message body&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$header&lt;/b&gt;: The message headers&#10;    string &lt;b&gt;$body&lt;/b&gt;: The message body;;d4,1515;;b2,0;;m,0;;estring $header;;pstring $body;;p">
</treenode>
<treenode node="serverHostname;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;3552;5;3569;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    serverHostname()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the server hostname.&#10;Returns &apos;localhost.localdomain&apos; if unknown.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,3553;;b2,0;;m,0;;e">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4022;5;4032;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    set($name, $value = &apos;&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set or reset instance properties.&#10;You should avoid this function - it&apos;s more verbose, less efficient, more error-prone and&#10;harder to debug than setting properties directly.&#10;Usage Example:&#10;`$mail-&gt;set(&apos;SMTPSecure&apos;, &apos;tls&apos;);s`&#10;is the same as:&#10;`$mail-&gt;SMTPSecure = &apos;tls&apos;;s`.&#10;The property name to set&#10;The value to set the property to&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: The property name to set&#10;    mixed &lt;b&gt;$value&lt;/b&gt;: The value to set the property to;;d4,4023;;b1,0;;m,0;;estring $name;;pmixed $value;;p">
</treenode>
<treenode node="setError;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;3511;5;3530;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setError($msg)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add an error message to the error container.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$msg&lt;/b&gt;;;d4,3512;;b2,0;;m,0;;estring $msg;;p">
</treenode>
<treenode node="setFrom;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;1127;5;1156;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setFrom($address, $name = &apos;&apos;, $auto = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the From and FromName properties.&#10;Whether to also set the Sender address, defaults to true&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$address&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;&#10;    bool &lt;b&gt;$auto&lt;/b&gt;: Whether to also set the Sender address, defaults to true;;d4,1128;;b1,0;;m,0;;estring $address;;pstring $name;;pbool $auto;;p">
</treenode>
<treenode node="setLE;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f21;4086;5;4089;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setLE($le)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the line break format string, e.g. &quot;\r\n&quot;.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$le&lt;/b&gt;;;d4,4087;;b2,5;;m,0;;estring $le;;p">
</treenode>
<treenode node="setLanguage;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;1956;5;2018;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setLanguage($langcode = &apos;en&apos;, $lang_path = &apos;&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the language for error messages.&#10;Returns false if it cannot load the language file.&#10;The default language is English.&#10;ISO 639-1 2-character language code (e.g. French is &quot;fr&quot;)&#10;Path to the language file directory, with trailing separator (slash)&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$langcode&lt;/b&gt;: ISO 639-1 2-character language code (e.g. French is &quot;fr&quot;)&#10;    string &lt;b&gt;$lang_path&lt;/b&gt;: Path to the language file directory, with trailing separator (slash);;d4,1957;;b1,0;;m,0;;estring $langcode;;pstring $lang_path;;p">
</treenode>
<treenode node="setMessageType;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;2697;5;2714;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setMessageType()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the message type.&#10;PHPMailer only supports some preset message types, not arbitrary MIME structures.;;d4,2698;;b2,0;;m,0;;e">
</treenode>
<treenode node="setOAuth;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4415;5;4418;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setOAuth(OAuth $oauth)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set an OAuth instance.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    OAuth &lt;b&gt;$oauth&lt;/b&gt;;;d4,4416;;b1,0;;m,0;;eOAuth $oauth;;p">
</treenode>
<treenode node="setSMTPInstance;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;1699;5;1704;;;;vpos;;v;;aSMTP;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setSMTPInstance(SMTP $smtp)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Provide an instance to use for SMTP operations.&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    SMTP &lt;b&gt;$smtp&lt;/b&gt;;;d4,1700;;b1,0;;m,0;;eSMTP $smtp;;p">
</treenode>
<treenode node="setWordWrap;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2226;5;2243;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setWordWrap()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Apply word wrapping to the message body.&#10;Wraps the message body to the number of chars set in the WordWrap property.&#10;You should only do this to plain-text bodies as wrapping HTML tags may break them.&#10;This is called automatically by createBody(), so you don&apos;t need to call it yourself.;;d4,2227;;b1,0;;m,0;;e">
</treenode>
<treenode node="sign;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;4099;5;4105;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sign($cert_filename, $key_filename, $key_pass, $extracerts_filename = &apos;&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set the public and private key files and password for S/MIME signing.&#10;Password for private key&#10;Optional path to chain certificate&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$cert_filename&lt;/b&gt;&#10;    string &lt;b&gt;$key_filename&lt;/b&gt;&#10;    string &lt;b&gt;$key_pass&lt;/b&gt;: Password for private key&#10;    string &lt;b&gt;$extracerts_filename&lt;/b&gt;: Optional path to chain certificate;;d4,4100;;b1,0;;m,0;;estring $cert_filename;;pstring $key_filename;;pstring $key_pass;;pstring $extracerts_filename;;p">
</treenode>
<treenode node="smtpClose;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;1936;5;1944;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    smtpClose()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Close the active SMTP session if one exists.;;d4,1937;;b1,0;;m,0;;e">
</treenode>
<treenode node="smtpConnect;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;1808;5;1931;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    smtpConnect($options = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Initiate a connection to an SMTP server.&#10;Returns false if the operation failed.&#10;An array of options compatible with stream_context_create()&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&lt;b&gt;uses&lt;/b&gt;: \PHPMailer\PHPMailer\SMTP&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    array &lt;b&gt;$options&lt;/b&gt;: An array of options compatible with stream_context_create();;d4,1809;;b1,0;;m,0;;earray $options;;p">
</treenode>
<treenode node="smtpSend;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f14;1721;5;1794;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    smtpSend($header, $body)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send mail via SMTP.&#10;Returns false if there is a bad MAIL FROM, RCPT, or DATA input.&#10;&lt;b&gt;see&lt;/b&gt;: PHPMailer::setSMTPInstance() to use a different class.&#10;&lt;b&gt;uses&lt;/b&gt;: \PHPMailer\PHPMailer\SMTP&#10;The message headers&#10;The message body&#10;&lt;b&gt;throws&lt;/b&gt;: Exception&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$header&lt;/b&gt;: The message headers&#10;    string &lt;b&gt;$body&lt;/b&gt;: The message body;;d4,1722;;b2,0;;m,0;;estring $header;;pstring $body;;p">
</treenode>
<treenode node="textLine;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2736;5;2739;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    textLine($value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return a formatted mail line.&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$value&lt;/b&gt;;;d4,2737;;b1,0;;m,0;;estring $value;;p">
</treenode>
<treenode node="utf8CharBoundary;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2182;5;2218;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    utf8CharBoundary($encodedText, $maxLength)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Find the last character boundary prior to $maxLength in a utf-8&#10;quoted-printable encoded string.&#10;Original written by Colin Brown.&#10;utf-8 QP text&#10;Find the last character boundary prior to this length&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$encodedText&lt;/b&gt;: utf-8 QP text&#10;    int &lt;b&gt;$maxLength&lt;/b&gt;: Find the last character boundary prior to this length;;d4,2183;;b1,0;;m,0;;estring $encodedText;;pint $maxLength;;p">
</treenode>
<treenode node="validateAddress;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f18;1195;5;1253;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    validateAddress($address, $patternselect = null)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check that a string looks like an email address.&#10;Validation patterns supported:&#10;* `auto` Pick best pattern automatically;s&#10;* `pcre8` Use the squiloople.com pattern, requires PCRE &gt; 8.0;s&#10;* `pcre` Use old PCRE implementation;s&#10;* `php` Use PHP built-in FILTER_VALIDATE_EMAIL;s&#10;* `html5` Use the pattern given by the HTML5 spec for &apos;email&apos; type form input elements.&#10;* `noregex` Don&apos;t use a regex: super fast, really dumb.&#10;Alternatively you may pass in a callable to inject your own validator, for example:&#10;```php&#10;PHPMailer::validateAddress(&apos;user&#10;&lt;b&gt;example&lt;/b&gt;: .com&apos;, function($address) {&#10;return (strpos($address, &apos;&#10;@&apos;) !== false);s&#10;});s&#10;```&#10;You can also set the PHPMailer::$validator static to a callable, allowing built-in methods to use your validator.&#10;The email address to check&#10;Which pattern to use&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$address&lt;/b&gt;: The email address to check&#10;    string|callable &lt;b&gt;$patternselect&lt;/b&gt;: Which pattern to use;;d4,1196;;b1,5;;m,0;;estring $address;;pstring|callable $patternselect;;p">
</treenode>
<treenode node="wrapText;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\PHPMailer.php;f11;2082;5;2170;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    wrapText($message, $length, $qp_mode = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Word-wrap message.&#10;For use with mailers that do not automatically perform wrapping&#10;and for quoted-printable encoded messages.&#10;Original written by philippe.&#10;The message to wrap&#10;The line length to wrap to&#10;Whether to run in Quoted-Printable mode&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: The message to wrap&#10;    int &lt;b&gt;$length&lt;/b&gt;: The line length to wrap to&#10;    bool &lt;b&gt;$qp_mode&lt;/b&gt;: Whether to run in Quoted-Printable mode;;d4,2083;;b1,0;;m,0;;estring $message;;pint $length;;pbool $qp_mode;;p">
</treenode>
</treenode>
<treenode node="POP3;PHP:Class Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f0;40;1;418;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class POP3&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    PHPMailer POP-Before-SMTP Authentication Class.&#10;Specifically for PHPMailer to use for RFC1939 POP-before-SMTP authentication.&#10;1) This class does not support APOP authentication.&#10;2) Opening and closing lots of POP3 connections can be quite slow. If you need&#10;to send a batch of emails then just perform the authentication once at the start,&#10;and then loop through your mail sending script. Providing this process doesn&apos;t&#10;take longer than the verification period lasts on your POP3 server, you should be fine.&#10;3) This is really ancient technology;s you should only need to use it to talk to very old systems.&#10;4) This POP3 class is deliberately lightweight and incomplete, and implements just&#10;enough to do authentication.&#10;If you want a more complete class there are other POP3 classes for PHP available.&#10;&lt;b&gt;author&lt;/b&gt;: Richard Davey (original author) &lt;rich&#10;&lt;b&gt;corephp&lt;/b&gt;: .co.uk&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Marcus Bointon (Synchro/coolbru) &lt;phpmailer&#10;&lt;b&gt;synchromedia&lt;/b&gt;: .co.uk&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Jim Jagielski (jimjag) &lt;jimjag&#10;&lt;b&gt;gmail&lt;/b&gt;: .com&gt;&#10;&lt;b&gt;author&lt;/b&gt;: Andy Prevost (codeworxtech) &lt;codeworxtech&#10;&lt;b&gt;users&lt;/b&gt;: .sourceforge.net&gt;;;d0,41;;b0,0;;m,0;;e">
<treenode node="DEFAULT_PORT;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f9;54;22;54;;;;vposint;;v;;a;;r110;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="DEFAULT_TIMEOUT;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f9;61;25;61;;;;vposint;;v;;a;;r30;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="LE;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f9;130;12;130;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Line break constant.;;d-1,-1;;b0,5;;m,0;;e">
</treenode>
<treenode node="VERSION;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f9;47;17;47;;;;vposstring;;v;;a;;r&apos;6.0.5&apos;;;d-1,-1;;b0,5;;m,0;;e">
</treenode>
<treenode node="authorise;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f11;171;5;205;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    authorise($host, $port = false, $timeout = false, $username = &apos;&apos;, $password = &apos;&apos;, $debug_level = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Authenticate with a POP3 server.&#10;A connect, login, disconnect sequence&#10;appropriate for POP-before SMTP authorisation.&#10;The hostname to connect to&#10;The port number to connect to&#10;The timeout value&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$host&lt;/b&gt;: The hostname to connect to&#10;    int|bool &lt;b&gt;$port&lt;/b&gt;: The port number to connect to&#10;    int|bool &lt;b&gt;$timeout&lt;/b&gt;: The timeout value&#10;    string &lt;b&gt;$username&lt;/b&gt;&#10;    string &lt;b&gt;$password&lt;/b&gt;&#10;    int &lt;b&gt;$debug_level&lt;/b&gt;;;d4,172;;b1,0;;m,0;;estring $host;;pint|bool $port;;pint|bool $timeout;;pstring $username;;pstring $password;;pint $debug_level;;p">
</treenode>
<treenode node="catchWarning;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f14;411;5;417;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    catchWarning($errno, $errstr, $errfile, $errline)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    POP3 connection error handler.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$errno&lt;/b&gt;&#10;    string &lt;b&gt;$errstr&lt;/b&gt;&#10;    string &lt;b&gt;$errfile&lt;/b&gt;&#10;    int &lt;b&gt;$errline&lt;/b&gt;;;d4,412;;b2,0;;m,0;;eint $errno;;pstring $errstr;;pstring $errfile;;pint $errline;;p">
</treenode>
<treenode node="checkResponse;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f14;364;5;373;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    checkResponse($string)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Checks the POP3 server response.&#10;Looks for for +OK or -ERR.&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$string&lt;/b&gt;;;d4,365;;b2,0;;m,0;;estring $string;;p">
</treenode>
<treenode node="connect;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f11;216;5;266;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    connect($host, $port = false, $tval = 30)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Connect to a POP3 server.&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$host&lt;/b&gt;&#10;    int|bool &lt;b&gt;$port&lt;/b&gt;&#10;    int &lt;b&gt;$tval&lt;/b&gt;;;d4,217;;b1,0;;m,0;;estring $host;;pint|bool $port;;pint $tval;;p">
</treenode>
<treenode node="disconnect;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f11;307;5;317;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    disconnect()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Disconnect from the POP3 server.;;d4,308;;b1,0;;m,0;;e">
</treenode>
<treenode node="getErrors;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f11;398;5;401;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getErrors()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get an array of error messages, if any.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,399;;b1,0;;m,0;;e">
</treenode>
<treenode node="getResponse;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f14;326;5;334;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getResponse($size = 128)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get a response from the POP3 server.&#10;The maximum number of bytes to retrieve&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$size&lt;/b&gt;: The maximum number of bytes to retrieve;;d4,327;;b2,0;;m,0;;eint $size;;p">
</treenode>
<treenode node="login;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f11;277;5;302;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    login($username = &apos;&apos;, $password = &apos;&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Log in to the POP3 server.&#10;Does not support APOP (RFC 2828, 4949).&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$username&lt;/b&gt;&#10;    string &lt;b&gt;$password&lt;/b&gt;;;d4,278;;b1,0;;m,0;;estring $username;;pstring $password;;p">
</treenode>
<treenode node="popBeforeSmtp;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f18;144;5;155;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    popBeforeSmtp(&#10;        $host,&#10;        $port = false,&#10;        $timeout = false,&#10;        $username = &apos;&apos;,&#10;        $password = &apos;&apos;,&#10;        $debug_level = 0&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Simple static wrapper for all-in-one POP before SMTP.&#10;The hostname to connect to&#10;The port number to connect to&#10;The timeout value&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$host&lt;/b&gt;: The hostname to connect to&#10;    int|bool &lt;b&gt;$port&lt;/b&gt;: The port number to connect to&#10;    int|bool &lt;b&gt;$timeout&lt;/b&gt;: The timeout value&#10;    string &lt;b&gt;$username&lt;/b&gt;&#10;    string &lt;b&gt;$password&lt;/b&gt;&#10;    int &lt;b&gt;$debug_level&lt;/b&gt;;;d6,151;;b1,5;;m,0;;estring $host;;pint|bool $port;;pint|bool $timeout;;pstring $username;;pstring $password;;pint $debug_level;;p">
</treenode>
<treenode node="sendString;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f14;343;5;354;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sendString($string)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send raw data to the POP3 server.&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$string&lt;/b&gt;;;d4,344;;b2,0;;m,0;;estring $string;;p">
</treenode>
<treenode node="setError;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\POP3.php;f14;381;5;391;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setError($error)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Add an error to the internal error store.&#10;Also display debug output if it&apos;s enabled.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$error&lt;/b&gt;;;d4,382;;b2,0;;m,0;;estring $error;;p">
</treenode>
</treenode>
<treenode node="Pedidos;PHP:Class Name;Z:\Godoy\clases\Pedidos.php;f0;4;1;82;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Pedidos.php;f11;19;5;22;;;;vpos;;v;;a;;r;;d4,20;;b1,0;;m,0;;e">
</treenode>
<treenode node="add;PHP:Function Name;Z:\Godoy\clases\Pedidos.php;f11;34;5;39;;;;vpos;;v;;a;;r;;d4,35;;b1,0;;m,0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;Z:\Godoy\clases\Pedidos.php;f11;48;5;53;;;;vpos;;v;;a;;r;;d4,49;;b1,0;;m,0;;e">
</treenode>
<treenode node="edit;PHP:Function Name;Z:\Godoy\clases\Pedidos.php;f11;41;5;46;;;;vpos;;v;;a;;r;;d4,42;;b1,0;;m,0;;e">
</treenode>
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\Pedidos.php;f11;29;5;32;;;;vpos;;v;;a;;r;;d4,30;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="list;PHP:Function Name;Z:\Godoy\clases\Pedidos.php;f4;63;5;81;;;;vpos;;v;;a;;r;;d27,63;;b0,0;;m,0;;efilter;;p">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\Pedidos.php;f11;24;5;27;;;;vpos;;v;;a;;r;;d4,25;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
<treenode node="view;PHP:Function Name;Z:\Godoy\clases\Pedidos.php;f11;55;5;61;;;;vpos;;v;;a;;r;;d4,56;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="Portfolio;PHP:Class Name;Z:\Godoy\clases\Portfolio.php;f0;4;1;82;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Portfolio.php;f11;19;5;22;;;;vpos;;v;;a;;r;;d4,20;;b1,0;;m,0;;e">
</treenode>
<treenode node="add;PHP:Function Name;Z:\Godoy\clases\Portfolio.php;f11;34;5;39;;;;vpos;;v;;a;;r;;d4,35;;b1,0;;m,0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;Z:\Godoy\clases\Portfolio.php;f11;48;5;53;;;;vpos;;v;;a;;r;;d4,49;;b1,0;;m,0;;e">
</treenode>
<treenode node="edit;PHP:Function Name;Z:\Godoy\clases\Portfolio.php;f11;41;5;46;;;;vpos;;v;;a;;r;;d4,42;;b1,0;;m,0;;e">
</treenode>
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\Portfolio.php;f11;29;5;32;;;;vpos;;v;;a;;r;;d4,30;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="list;PHP:Function Name;Z:\Godoy\clases\Portfolio.php;f4;63;5;81;;;;vpos;;v;;a;;r;;d27,63;;b0,0;;m,0;;efilter;;p">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\Portfolio.php;f11;24;5;27;;;;vpos;;v;;a;;r;;d4,25;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
<treenode node="view;PHP:Function Name;Z:\Godoy\clases\Portfolio.php;f11;55;5;61;;;;vpos;;v;;a;;r;;d4,56;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="Productos;PHP:Class Name;Z:\Godoy\clases\Productos.php;f0;4;1;103;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Productos.php;f11;25;5;28;;;;vpos;;v;;a;;r;;d4,26;;b1,0;;m,0;;e">
</treenode>
<treenode node="add;PHP:Function Name;Z:\Godoy\clases\Productos.php;f11;40;5;45;;;;vpos;;v;;a;;r;;d4,41;;b1,0;;m,0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;Z:\Godoy\clases\Productos.php;f11;68;5;73;;;;vpos;;v;;a;;r;;d4,69;;b1,0;;m,0;;e">
</treenode>
<treenode node="edit;PHP:Function Name;Z:\Godoy\clases\Productos.php;f11;47;5;66;;;;vpos;;v;;a;;r;;d4,48;;b1,0;;m,0;;e">
</treenode>
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\Productos.php;f11;35;5;38;;;;vpos;;v;;a;;r;;d4,36;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="list;PHP:Function Name;Z:\Godoy\clases\Productos.php;f4;83;5;101;;;;vpos;;v;;a;;r;;d27,83;;b0,0;;m,0;;efilter;;p">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\Productos.php;f11;30;5;33;;;;vpos;;v;;a;;r;;d4,31;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
<treenode node="view;PHP:Function Name;Z:\Godoy\clases\Productos.php;f11;75;5;81;;;;vpos;;v;;a;;r;;d4,76;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="PublicFunction;PHP:Class Name;Z:\Godoy\clases\PublicFunction.php;f0;2;1;25;;;;vpos;;v;;a;;r;;d0,3;;b0,0;;m,0;;e">
<treenode node="antihack;PHP:Function Name;Z:\Godoy\clases\PublicFunction.php;f11;13;5;19;;;;vpos;;v;;a;;r;;d4,14;;b1,0;;m,0;;estr;;p">
</treenode>
<treenode node="antihack_mysqli;PHP:Function Name;Z:\Godoy\clases\PublicFunction.php;f11;5;5;11;;;;vpos;;v;;a;;r;;d4,6;;b1,0;;m,0;;estr;;p">
</treenode>
<treenode node="headerMove;PHP:Function Name;Z:\Godoy\clases\PublicFunction.php;f11;21;5;24;;;;vpos;;v;;a;;r;;d4,22;;b1,0;;m,0;;elocation;;p">
</treenode>
</treenode>
<treenode node="SMTP;PHP:Class Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f0;29;1;1324;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class SMTP&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    PHPMailer RFC821 SMTP email transport class.&#10;Implements RFC 821 SMTP commands and provides some utility methods for sending mail to an SMTP server.&#10;&lt;b&gt;author&lt;/b&gt;: Chris Ryan&#10;&lt;b&gt;author&lt;/b&gt;: Marcus Bointon &lt;phpmailer&#10;&lt;b&gt;synchromedia&lt;/b&gt;: .co.uk&gt;;;d0,30;;b0,0;;m,0;;e">
<treenode node="DEBUG_CLIENT;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f9;67;22;67;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Debug level to show client -&gt; server messages.;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="DEBUG_CONNECTION;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f9;77;26;77;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Debug level to show connection status, client -&gt; server and server -&gt; client messages.;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="DEBUG_LOWLEVEL;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f9;82;24;82;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Debug level to show all messages.;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="DEBUG_OFF;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f9;62;19;62;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Debug level for no output.;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="DEBUG_SERVER;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f9;72;22;72;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Debug level to show client -&gt; server and server -&gt; client messages.;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="DEFAULT_PORT;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f9;50;22;50;;;;vposint;;v;;a;;r25;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="LE;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f9;43;12;43;;;;vposstring;;v;;a;;r&quot;\r\n&quot;;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="MAX_LINE_LENGTH;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f9;57;25;57;;;;vposint;;v;;a;;r998;;d-1,-1;;b1,5;;m,0;;e">
</treenode>
<treenode node="VERSION;PHP:PHP Word;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f9;36;17;36;;;;vposstring;;v;;a;;r&apos;6.0.5&apos;;;d-1,-1;;b0,5;;m,0;;e">
</treenode>
<treenode node="authenticate;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;423;5;542;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    authenticate(&#10;        $username,&#10;        $password,&#10;        $authtype = null,&#10;        $OAuth = null&#10;    )&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Perform SMTP authentication.&#10;Must be run after hello().&#10;&lt;b&gt;see&lt;/b&gt;: hello()&#10;The user name&#10;The password&#10;The auth type (CRAM-MD5, PLAIN, LOGIN, XOAUTH2)&#10;An optional OAuth instance for XOAUTH2 authentication&#10;&lt;b&gt;return&lt;/b&gt;: True if successfully authenticated&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$username&lt;/b&gt;: The user name&#10;    string &lt;b&gt;$password&lt;/b&gt;: The password&#10;    string &lt;b&gt;$authtype&lt;/b&gt;: The auth type (CRAM-MD5, PLAIN, LOGIN, XOAUTH2)&#10;    OAuth &lt;b&gt;$OAuth&lt;/b&gt;: An optional OAuth instance for XOAUTH2 authentication;;d6,428;;b1,0;;m,0;;estring $username;;pstring $password;;pstring $authtype;;pOAuth $OAuth;;p">
</treenode>
<treenode node="client_send;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;1011;5;1026;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    client_send($data, $command = &apos;&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send raw data to the server.&#10;The data to send&#10;Optionally, the command this is part of, used only for controlling debug output&#10;&lt;b&gt;return&lt;/b&gt;: |bool The number of bytes sent to the server or false on error&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$data&lt;/b&gt;: The data to send&#10;    string &lt;b&gt;$command&lt;/b&gt;: Optionally, the command this is part of, used only for controlling debug output;;d4,1012;;b1,0;;m,0;;estring $data;;pstring $command;;p">
</treenode>
<treenode node="close;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;613;5;624;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    close()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Close the socket and clean up the state of the class.&#10;Don&apos;t use this function without first trying to use QUIT.&#10;&lt;b&gt;see&lt;/b&gt;: quit();;d4,614;;b1,0;;m,0;;e">
</treenode>
<treenode node="connect;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;287;5;375;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    connect($host, $port = null, $timeout = 30, $options = [])&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Connect to an SMTP server.&#10;SMTP server IP or host name&#10;The port number to connect to&#10;How long to wait for the connection to open&#10;An array of options for stream_context_create()&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$host&lt;/b&gt;: SMTP server IP or host name&#10;    int &lt;b&gt;$port&lt;/b&gt;: The port number to connect to&#10;    int &lt;b&gt;$timeout&lt;/b&gt;: How long to wait for the connection to open&#10;    array &lt;b&gt;$options&lt;/b&gt;: An array of options for stream_context_create();;d4,288;;b1,0;;m,0;;estring $host;;pint $port;;pint $timeout;;parray $options;;p">
</treenode>
<treenode node="connected;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;586;5;605;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    connected()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Check connection state.&#10;&lt;b&gt;return&lt;/b&gt;: True if connected;;d4,587;;b1,0;;m,0;;e">
</treenode>
<treenode node="data;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;639;5;718;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    data($msg_data)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send an SMTP DATA command.&#10;Issues a data command and sends the msg_data to the server,&#10;finializing the mail transaction. $msg_data is the message&#10;that is to be send with the headers. Each header needs to be&#10;on a single line followed by a &lt;CRLF&gt; with the message headers&#10;and the message body being separated by an additional &lt;CRLF&gt;.&#10;Implements RFC 821: DATA &lt;CRLF&gt;.&#10;Message data to send&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$msg_data&lt;/b&gt;: Message data to send;;d4,640;;b1,0;;m,0;;estring $msg_data;;p">
</treenode>
<treenode node="edebug;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f14;228;5;275;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    edebug($str, $level = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Output debugging info via a user-selected method.&#10;Debug string to output&#10;The debug level of this message;s see DEBUG_* constants&#10;&lt;b&gt;see&lt;/b&gt;: SMTP::$Debugoutput&#10;&lt;b&gt;see&lt;/b&gt;: SMTP::$do_debug&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$str&lt;/b&gt;: Debug string to output&#10;    int &lt;b&gt;$level&lt;/b&gt;: The debug level of this message;s see DEBUG_* constants;;d4,229;;b2,0;;m,0;;estring $str;;pint $level;;p">
</treenode>
<treenode node="errorHandler;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f14;1269;5;1281;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    errorHandler($errno, $errmsg, $errfile = &apos;&apos;, $errline = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Reports an error number and string.&#10;The error number returned by PHP&#10;The error message returned by PHP&#10;The file the error occurred in&#10;The line number the error occurred on&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$errno&lt;/b&gt;: The error number returned by PHP&#10;    string &lt;b&gt;$errmsg&lt;/b&gt;: The error message returned by PHP&#10;    string &lt;b&gt;$errfile&lt;/b&gt;: The file the error occurred in&#10;    int &lt;b&gt;$errline&lt;/b&gt;: The line number the error occurred on;;d4,1270;;b2,0;;m,0;;eint $errno;;pstring $errmsg;;pstring $errfile;;pint $errline;;p">
</treenode>
<treenode node="getDebugLevel;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;1236;5;1239;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDebugLevel()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get debug output level.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,1237;;b1,0;;m,0;;e">
</treenode>
<treenode node="getDebugOutput;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;1216;5;1219;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getDebugOutput()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get debug output method.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,1217;;b1,0;;m,0;;e">
</treenode>
<treenode node="getError;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;1033;5;1036;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getError()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the latest error.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,1034;;b1,0;;m,0;;e">
</treenode>
<treenode node="getLastReply;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;1093;5;1096;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLastReply()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the last reply from the server.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,1094;;b1,0;;m,0;;e">
</treenode>
<treenode node="getLastTransactionID;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;1320;5;1323;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getLastTransactionID()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the queue/transaction ID of the last SMTP transaction&#10;If no reply has been received yet, it will return null.&#10;If no pattern was matched, it will return false.&#10;&lt;b&gt;return&lt;/b&gt;: |null|string&#10;&lt;b&gt;see&lt;/b&gt;: recordLastTransactionID();;d4,1321;;b1,0;;m,0;;e">
</treenode>
<treenode node="getServerExt;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;1065;5;1086;;;;vpos;;v;;amixed;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getServerExt($name)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get metadata about the SMTP server from its HELO/EHLO response.&#10;The method works in three ways, dependent on argument value and current state:&#10;1. HELO/EHLO has not been sent - returns null and populates $this-&gt;error.&#10;2. HELO has been sent -&#10;$name == &apos;HELO&apos;: returns server name&#10;$name == &apos;EHLO&apos;: returns boolean false&#10;$name == any other string: returns null and populates $this-&gt;error&#10;3. EHLO has been sent -&#10;$name == &apos;HELO&apos;|&apos;EHLO&apos;: returns the server name&#10;$name == any other string: if extension $name exists, returns True&#10;or its options (e.g. AUTH mechanisms supported). Otherwise returns False.&#10;Name of SMTP extension or &apos;HELO&apos;|&apos;EHLO&apos;&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: Name of SMTP extension or &apos;HELO&apos;|&apos;EHLO&apos;;;d4,1066;;b1,0;;m,0;;estring $name;;p">
</treenode>
<treenode node="getServerExtList;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;1043;5;1046;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getServerExtList()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get SMTP extensions available on the server.&#10;&lt;b&gt;return&lt;/b&gt;: |null;;d4,1044;;b1,0;;m,0;;e">
</treenode>
<treenode node="getTimeout;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;1256;5;1259;;;;vpos;;v;;aint;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getTimeout()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get SMTP timeout.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,1257;;b1,0;;m,0;;e">
</treenode>
<treenode node="getVerp;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;1178;5;1181;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    getVerp()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get VERP address generation mode.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,1179;;b1,0;;m,0;;e">
</treenode>
<treenode node="get_lines;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f14;1107;5;1161;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    get_lines()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Read the SMTP server&apos;s response.&#10;Either before eof or socket timeout occurs on the operation.&#10;With SMTP we can tell if we have more lines to read if the&#10;4th character is &apos;-&apos; symbol. If it is a space then we don&apos;t&#10;need to read anything else.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,1108;;b2,0;;m,0;;e">
</treenode>
<treenode node="hello;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;731;5;735;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hello($host = &apos;&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send an SMTP HELO or EHLO command.&#10;Used to identify the sending server to the receiving server.&#10;This makes sure that client and server are in a known state.&#10;Implements RFC 821: HELO &lt;SP&gt; &lt;domain&gt; &lt;CRLF&gt;&#10;and RFC 2821 EHLO.&#10;The host name or IP to connect to&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$host&lt;/b&gt;: The host name or IP to connect to;;d4,732;;b1,0;;m,0;;estring $host;;p">
</treenode>
<treenode node="hmac;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f14;554;5;579;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hmac($data, $key)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Calculate an MD5 HMAC hash.&#10;Works like hash_hmac(&apos;md5&apos;, $data, $key)&#10;in case that function is not available.&#10;The data to hash&#10;The key to hash with&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$data&lt;/b&gt;: The data to hash&#10;    string &lt;b&gt;$key&lt;/b&gt;: The key to hash with;;d4,555;;b2,0;;m,0;;estring $data;;pstring $key;;p">
</treenode>
<treenode node="mail;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;815;5;824;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    mail($from)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send an SMTP MAIL command.&#10;Starts a mail transaction from the email address specified in&#10;$from. Returns true if successful or false otherwise. If True&#10;the mail transaction is started and then one or more recipient&#10;commands may be called followed by a data command.&#10;Implements RFC 821: MAIL &lt;SP&gt; FROM:&lt;reverse-path&gt; &lt;CRLF&gt;.&#10;Source address of this message&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$from&lt;/b&gt;: Source address of this message;;d4,816;;b1,0;;m,0;;estring $from;;p">
</treenode>
<treenode node="noop;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;981;5;984;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    noop()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send an SMTP NOOP command.&#10;Used to keep keep-alives alive, doesn&apos;t actually do anything.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,982;;b1,0;;m,0;;e">
</treenode>
<treenode node="parseHelloFields;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f14;767;5;801;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    parseHelloFields($type)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Parse a reply to HELO/EHLO command to discover server extensions.&#10;In case of HELO, the only parameter that can be discovered is a server name.&#10;`HELO` or `EHLO`&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$type&lt;/b&gt;: `HELO` or `EHLO`;;d4,768;;b2,0;;m,0;;estring $type;;p">
</treenode>
<treenode node="quit;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;835;5;845;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    quit($close_on_error = true)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send an SMTP QUIT command.&#10;Closes the socket if there is no error or the $close_on_error argument is true.&#10;Implements from RFC 821: QUIT &lt;CRLF&gt;.&#10;Should the connection close if an error occurs?&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$close_on_error&lt;/b&gt;: Should the connection close if an error occurs?;;d4,836;;b1,0;;m,0;;ebool $close_on_error;;p">
</treenode>
<treenode node="recipient;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;857;5;864;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    recipient($address)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send an SMTP RCPT command.&#10;Sets the TO argument to $toaddr.&#10;Returns true if the recipient was accepted false if it was rejected.&#10;Implements from RFC 821: RCPT &lt;SP&gt; TO:&lt;forward-path&gt; &lt;CRLF&gt;.&#10;The address the message is being sent to&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$address&lt;/b&gt;: The address the message is being sent to;;d4,858;;b1,0;;m,0;;estring $address;;p">
</treenode>
<treenode node="recordLastTransactionID;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f14;1292;5;1309;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    recordLastTransactionID()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Extract and return the ID of the last SMTP transaction based on&#10;a list of patterns provided in SMTP::$smtp_transaction_id_patterns.&#10;Relies on the host providing the ID in response to a DATA command.&#10;If no reply has been received yet, it will return null.&#10;If no pattern was matched, it will return false.&#10;&lt;b&gt;return&lt;/b&gt;: |null|string;;d4,1293;;b2,0;;m,0;;e">
</treenode>
<treenode node="reset;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;873;5;876;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    reset()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send an SMTP RSET command.&#10;Abort any transaction that is currently in progress.&#10;Implements RFC 821: RSET &lt;CRLF&gt;.&#10;&lt;b&gt;return&lt;/b&gt;: True on success;;d4,874;;b1,0;;m,0;;e">
</treenode>
<treenode node="sendAndMail;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;958;5;961;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sendAndMail($from)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send an SMTP SAML command.&#10;Starts a mail transaction from the email address specified in $from.&#10;Returns true if successful or false otherwise. If True&#10;the mail transaction is started and then one or more recipient&#10;commands may be called followed by a data command. This command&#10;will send the message to the users terminal if they are logged&#10;in and send them an email.&#10;Implements RFC 821: SAML &lt;SP&gt; FROM:&lt;reverse-path&gt; &lt;CRLF&gt;.&#10;The address the message is from&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$from&lt;/b&gt;: The address the message is from;;d4,959;;b1,0;;m,0;;estring $from;;p">
</treenode>
<treenode node="sendCommand;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f14;887;5;942;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sendCommand($command, $commandstring, $expect)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send a command to an SMTP server and check its return code.&#10;The command name - not sent to the server&#10;The actual command to send&#10;One or more expected integer success codes&#10;&lt;b&gt;return&lt;/b&gt;: True on success&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$command&lt;/b&gt;: The command name - not sent to the server&#10;    string &lt;b&gt;$commandstring&lt;/b&gt;: The actual command to send&#10;    int|array &lt;b&gt;$expect&lt;/b&gt;: One or more expected integer success codes;;d4,888;;b2,0;;m,0;;estring $command;;pstring $commandstring;;pint|array $expect;;p">
</treenode>
<treenode node="sendHello;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f14;748;5;759;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    sendHello($hello, $host)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send an SMTP HELO or EHLO command.&#10;Low-level implementation used by hello().&#10;The HELO string&#10;The hostname to say we are&#10;&lt;b&gt;return&lt;/b&gt;&#10;&lt;b&gt;see&lt;/b&gt;: hello()&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$hello&lt;/b&gt;: The HELO string&#10;    string &lt;b&gt;$host&lt;/b&gt;: The hostname to say we are;;d4,749;;b2,0;;m,0;;estring $hello;;pstring $host;;p">
</treenode>
<treenode node="setDebugLevel;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;1226;5;1229;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setDebugLevel($level = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set debug output level.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$level&lt;/b&gt;;;d4,1227;;b1,0;;m,0;;eint $level;;p">
</treenode>
<treenode node="setDebugOutput;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;1206;5;1209;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setDebugOutput($method = &apos;echo&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set debug output method.&#10;The name of the mechanism to use for debugging output, or a callable to handle it&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string|callable &lt;b&gt;$method&lt;/b&gt;: The name of the mechanism to use for debugging output, or a callable to handle it;;d4,1207;;b1,0;;m,0;;estring|callable $method;;p">
</treenode>
<treenode node="setError;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f14;1191;5;1199;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setError($message, $detail = &apos;&apos;, $smtp_code = &apos;&apos;, $smtp_code_ex = &apos;&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set error messages and codes.&#10;The error message&#10;Further detail on the error&#10;An associated SMTP error code&#10;Extended SMTP code&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$message&lt;/b&gt;: The error message&#10;    string &lt;b&gt;$detail&lt;/b&gt;: Further detail on the error&#10;    string &lt;b&gt;$smtp_code&lt;/b&gt;: An associated SMTP error code&#10;    string &lt;b&gt;$smtp_code_ex&lt;/b&gt;: Extended SMTP code;;d4,1192;;b2,0;;m,0;;estring $message;;pstring $detail;;pstring $smtp_code;;pstring $smtp_code_ex;;p">
</treenode>
<treenode node="setTimeout;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;1246;5;1249;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setTimeout($timeout = 0)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Set SMTP timeout.&#10;The timeout duration in seconds&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    int &lt;b&gt;$timeout&lt;/b&gt;: The timeout duration in seconds;;d4,1247;;b1,0;;m,0;;eint $timeout;;p">
</treenode>
<treenode node="setVerp;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;1168;5;1171;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    setVerp($enabled = false)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Enable or disable VERP address generation.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    bool &lt;b&gt;$enabled&lt;/b&gt;;;d4,1169;;b1,0;;m,0;;ebool $enabled;;p">
</treenode>
<treenode node="startTLS;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;382;5;408;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    startTLS()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Initiate a TLS (encrypted) session.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,383;;b1,0;;m,0;;e">
</treenode>
<treenode node="turn;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;995;5;1001;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    turn()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send an SMTP TURN command.&#10;This is an optional command for SMTP that this class does not support.&#10;This method is here to make the RFC821 Definition complete for this class&#10;and _may_ be implemented in future.&#10;Implements from RFC 821: TURN &lt;CRLF&gt;.&#10;&lt;b&gt;return&lt;/b&gt;;;d4,996;;b1,0;;m,0;;e">
</treenode>
<treenode node="verify;PHP:Function Name;Z:\Godoy\vendor\phpmailer\phpmailer\src\SMTP.php;f11;970;5;973;;;;vpos;;v;;abool;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    verify($name)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Send an SMTP VRFY command.&#10;The name to verify&#10;&lt;b&gt;return&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$name&lt;/b&gt;: The name to verify;;d4,971;;b1,0;;m,0;;estring $name;;p">
</treenode>
</treenode>
<treenode node="Servicios;PHP:Class Name;Z:\Godoy\clases\Servicios.php;f0;4;1;83;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Servicios.php;f11;19;5;22;;;;vpos;;v;;a;;r;;d4,20;;b1,0;;m,0;;e">
</treenode>
<treenode node="add;PHP:Function Name;Z:\Godoy\clases\Servicios.php;f11;34;5;39;;;;vpos;;v;;a;;r;;d4,35;;b1,0;;m,0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;Z:\Godoy\clases\Servicios.php;f11;48;5;53;;;;vpos;;v;;a;;r;;d4,49;;b1,0;;m,0;;e">
</treenode>
<treenode node="edit;PHP:Function Name;Z:\Godoy\clases\Servicios.php;f11;41;5;46;;;;vpos;;v;;a;;r;;d4,42;;b1,0;;m,0;;e">
</treenode>
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\Servicios.php;f11;29;5;32;;;;vpos;;v;;a;;r;;d4,30;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="list;PHP:Function Name;Z:\Godoy\clases\Servicios.php;f4;63;1;81;;;;vpos;;v;;a;;r;;d27,63;;b0,0;;m,0;;efilter;;p">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\Servicios.php;f11;24;5;27;;;;vpos;;v;;a;;r;;d4,25;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
<treenode node="view;PHP:Function Name;Z:\Godoy\clases\Servicios.php;f11;55;5;61;;;;vpos;;v;;a;;r;;d4,56;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="Sliders;PHP:Class Name;Z:\Godoy\clases\Sliders.php;f0;4;1;79;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Sliders.php;f11;16;5;19;;;;vpos;;v;;a;;r;;d4,17;;b1,0;;m,0;;e">
</treenode>
<treenode node="add;PHP:Function Name;Z:\Godoy\clases\Sliders.php;f11;31;5;36;;;;vpos;;v;;a;;r;;d4,32;;b1,0;;m,0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;Z:\Godoy\clases\Sliders.php;f11;45;5;50;;;;vpos;;v;;a;;r;;d4,46;;b1,0;;m,0;;e">
</treenode>
<treenode node="edit;PHP:Function Name;Z:\Godoy\clases\Sliders.php;f11;38;5;43;;;;vpos;;v;;a;;r;;d4,39;;b1,0;;m,0;;e">
</treenode>
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\Sliders.php;f11;26;5;29;;;;vpos;;v;;a;;r;;d4,27;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="list;PHP:Function Name;Z:\Godoy\clases\Sliders.php;f4;60;5;78;;;;vpos;;v;;a;;r;;d27,60;;b0,0;;m,0;;efilter;;p">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\Sliders.php;f11;21;5;24;;;;vpos;;v;;a;;r;;d4,22;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
<treenode node="view;PHP:Function Name;Z:\Godoy\clases\Sliders.php;f11;52;5;58;;;;vpos;;v;;a;;r;;d4,53;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="TemplateAdmin;PHP:Class Name;Z:\Godoy\clases\TemplateAdmin.php;f0;4;1;61;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m,0;;e">
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\TemplateAdmin.php;f11;57;5;60;;;;vpos;;v;;a;;r;;d4,58;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\TemplateAdmin.php;f11;52;5;55;;;;vpos;;v;;a;;r;;d4,53;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
<treenode node="themeEnd;PHP:Function Name;Z:\Godoy\clases\TemplateAdmin.php;f11;36;1;50;;;;vpos;;v;;a;;r;;d4,37;;b1,0;;m,0;;e">
</treenode>
<treenode node="themeInit;PHP:Function Name;Z:\Godoy\clases\TemplateAdmin.php;f11;13;1;34;;;;vpos;;v;;a;;r;;d4,14;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="TemplateSite;PHP:Class Name;Z:\Godoy\clases\TemplateSite.php;f0;4;1;41;;;;vpos;;v;;a;;r;;d0,5;;b0,0;;m,0;;e">
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\TemplateSite.php;f11;37;5;40;;;;vpos;;v;;a;;r;;d4,38;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\TemplateSite.php;f11;32;5;35;;;;vpos;;v;;a;;r;;d4,33;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
<treenode node="themeEnd;PHP:Function Name;Z:\Godoy\clases\TemplateSite.php;f11;24;5;30;;;;vpos;;v;;a;;r;;d4,25;;b1,0;;m,0;;e">
</treenode>
<treenode node="themeInit;PHP:Function Name;Z:\Godoy\clases\TemplateSite.php;f11;13;5;22;;;;vpos;;v;;a;;r;;d4,14;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="Usuarios;PHP:Class Name;Z:\Godoy\clases\Usuarios.php;f0;3;1;134;;;;vpos;;v;;a;;r;;d0,4;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Usuarios.php;f11;26;5;29;;;;vpos;;v;;a;;r;;d4,27;;b1,0;;m,0;;e">
</treenode>
<treenode node="add;PHP:Function Name;Z:\Godoy\clases\Usuarios.php;f11;41;5;51;;;;vpos;;v;;a;;r;;d4,42;;b1,0;;m,0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;Z:\Godoy\clases\Usuarios.php;f11;72;5;77;;;;vpos;;v;;a;;r;;d4,73;;b1,0;;m,0;;e">
</treenode>
<treenode node="edit;PHP:Function Name;Z:\Godoy\clases\Usuarios.php;f11;53;5;70;;;;vpos;;v;;a;;r;;d4,54;;b1,0;;m,0;;e">
</treenode>
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\Usuarios.php;f11;36;5;39;;;;vpos;;v;;a;;r;;d4,37;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="list;PHP:Function Name;Z:\Godoy\clases\Usuarios.php;f4;114;5;132;;;;vpos;;v;;a;;r;;d27,114;;b0,0;;m,0;;efilter;;p">
</treenode>
<treenode node="login;PHP:Function Name;Z:\Godoy\clases\Usuarios.php;f11;79;5;89;;;;vpos;;v;;a;;r;;d4,80;;b1,0;;m,0;;e">
</treenode>
<treenode node="logout;PHP:Function Name;Z:\Godoy\clases\Usuarios.php;f11;91;5;96;;;;vpos;;v;;a;;r;;d4,92;;b1,0;;m,0;;e">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\Usuarios.php;f11;31;5;34;;;;vpos;;v;;a;;r;;d4,32;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
<treenode node="validate;PHP:Function Name;Z:\Godoy\clases\Usuarios.php;f11;106;5;112;;;;vpos;;v;;a;;r;;d4,107;;b1,0;;m,0;;e">
</treenode>
<treenode node="view;PHP:Function Name;Z:\Godoy\clases\Usuarios.php;f11;98;5;104;;;;vpos;;v;;a;;r;;d4,99;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="Videos;PHP:Class Name;Z:\Godoy\clases\Videos.php;f0;2;1;74;;;;vpos;;v;;a;;r;;d0,3;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Videos.php;f11;11;5;14;;;;vpos;;v;;a;;r;;d4,12;;b1,0;;m,0;;e">
</treenode>
<treenode node="add;PHP:Function Name;Z:\Godoy\clases\Videos.php;f11;26;5;31;;;;vpos;;v;;a;;r;;d4,27;;b1,0;;m,0;;e">
</treenode>
<treenode node="delete;PHP:Function Name;Z:\Godoy\clases\Videos.php;f11;40;5;45;;;;vpos;;v;;a;;r;;d4,41;;b1,0;;m,0;;e">
</treenode>
<treenode node="edit;PHP:Function Name;Z:\Godoy\clases\Videos.php;f11;33;5;38;;;;vpos;;v;;a;;r;;d4,34;;b1,0;;m,0;;e">
</treenode>
<treenode node="get;PHP:Function Name;Z:\Godoy\clases\Videos.php;f11;21;5;25;;;;vpos;;v;;a;;r;;d4,22;;b1,0;;m,0;;eatributo;;p">
</treenode>
<treenode node="list;PHP:Function Name;Z:\Godoy\clases\Videos.php;f4;55;5;73;;;;vpos;;v;;a;;r;;d27,55;;b0,0;;m,0;;efilter;;p">
</treenode>
<treenode node="set;PHP:Function Name;Z:\Godoy\clases\Videos.php;f11;16;5;19;;;;vpos;;v;;a;;r;;d4,17;;b1,0;;m,0;;eatributo;;pvalor;;p">
</treenode>
<treenode node="view;PHP:Function Name;Z:\Godoy\clases\Videos.php;f11;47;5;53;;;;vpos;;v;;a;;r;;d4,48;;b1,0;;m,0;;e">
</treenode>
</treenode>
<treenode node="Zebra_Image;PHP:Class Name;Z:\Godoy\clases\Zebra_Image.php;f0;42;1;1400;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Zebra_Image&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    A compact, lightweight, object-oriented image manipulation library written in and for PHP, that provides methods&#10;for performing several types of image manipulation operations. It doesn&apos;t require any external libraries other than&#10;the GD2 extension (with which PHP usually comes precompiled with).&#10;The code is heavily commented and generates no warnings/errors/notices when PHP&apos;s error reporting level is set to&#10;E_ALL.&#10;With this library you can rescale, flip, rotate and crop images. It supports loading and saving images in the GIF,&#10;JPEG and PNG formats and preserves transparency for GIF, PNG and PNG24.&#10;The cool thing about it is that it can resize images to exact given width and height and still maintain aspect&#10;ratio.&#10;Visit {&#10;&lt;b&gt;link&lt;/b&gt;: http://stefangabos.ro/php-libraries/zebra-image/} for more information.&#10;For more resources visit {&#10;&lt;b&gt;link&lt;/b&gt;: http://stefangabos.ro/}&#10;&lt;b&gt;author&lt;/b&gt;: Stefan Gabos &lt;contact&#10;&lt;b&gt;stefangabos&lt;/b&gt;: .ro&gt;&#10;&lt;b&gt;version&lt;/b&gt;: 2.2.3 (last revision: July 14, 2013)&#10;&lt;b&gt;copyright&lt;/b&gt;: (c) 2006 - 2013 Stefan Gabos&#10;&lt;b&gt;license&lt;/b&gt;: http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE&#10;&lt;b&gt;package&lt;/b&gt;: Zebra_Image;;d0,43;;b0,0;;m,0;;e">
<treenode node="__construct;PHP:Function Name;Z:\Godoy\clases\Zebra_Image.php;f11;182;5;192;;;;vpos;;v;;avoid;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    __construct()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Constructor of the class.&#10;Initializes the class and the default properties&#10;&lt;b&gt;return&lt;/b&gt;;;d4,183;;b1,0;;m,0;;e">
</treenode>
<treenode node="_create_from_source;PHP:Function Name;Z:\Godoy\clases\Zebra_Image.php;f12;1020;5;1100;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    _create_from_source()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns an array containing the image identifier representing the image obtained from {&#10;&lt;b&gt;link&lt;/b&gt;: $source_path}, the&#10;image&apos;s width and height and the image&apos;s type&#10;&lt;b&gt;access&lt;/b&gt;: private;;d4,1021;;b3,0;;m,0;;e">
</treenode>
<treenode node="_flip;PHP:Function Name;Z:\Godoy\clases\Zebra_Image.php;f12;1157;5;1215;;;;vpos;;v;;aboolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    _flip($orientation)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Flips horizontally or vertically or both ways the image given as {&#10;&lt;b&gt;link&lt;/b&gt;: source_path}.&#10;&lt;b&gt;since&lt;/b&gt;: 2.1&#10;&lt;b&gt;access&lt;/b&gt;: private&#10;&lt;b&gt;return&lt;/b&gt;: Returns TRUE on success or FALSE on error.&#10;If FALSE is returned, check the {&#10;&lt;b&gt;link&lt;/b&gt;: error} property to see the error code.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   If FALSE is returned, check the {;;d4,1158;;b3,0;;m,0;;eorientation;;p">
</treenode>
<treenode node="_hex2rgb;PHP:Function Name;Z:\Godoy\clases\Zebra_Image.php;f12;1115;5;1145;;;;vpos;;v;;aarray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    _hex2rgb($color, $default_on_error = &apos;#FFFFFF&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Converts a hexadecimal representation of a color (i.e. #123456 or #AAA) to a RGB representation.&#10;The RGB values will be a value between 0 and 255 each.&#10;Hexadecimal representation of a color (i.e. #123456 or #AAA).&#10;Hexadecimal representation of a color to be used in case $color is not&#10;recognized as a hexadecimal color.&#10;&lt;b&gt;return&lt;/b&gt;: Returns an associative array with the values of (R)ed, (G)reen and (B)lue&#10;&lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$color&lt;/b&gt;: Hexadecimal representation of a color (i.e. #123456 or #AAA).&#10;    string &lt;b&gt;$default_on_error&lt;/b&gt;: Hexadecimal representation of a color to be used in case $color is not recognized as a hexadecimal color.;;d4,1116;;b3,0;;m,0;;estring $color;;pstring $default_on_error;;p">
</treenode>
<treenode node="_prepare_image;PHP:Function Name;Z:\Godoy\clases\Zebra_Image.php;f12;1234;5;1277;;;;vpos;;v;;aReturns;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    _prepare_image($width, $height, $background_color = &apos;#FFFFFF&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a blank image of given width, height and background color.&#10;Width of the new image.&#10;Height of the new image.&#10;(Optional) The hexadecimal color of the background.&#10;Can also be -1 case in which the script will try to create a transparent&#10;image, if possible.&#10;Default is &quot;#FFFFFF&quot;.&#10;&lt;b&gt;return&lt;/b&gt;: the identifier of the newly created image.&#10;&lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    integer &lt;b&gt;$width&lt;/b&gt;: Width of the new image.&#10;    integer &lt;b&gt;$height&lt;/b&gt;: Height of the new image.&#10;    string &lt;b&gt;$background_color&lt;/b&gt;: (Optional) The hexadecimal color of the background. Can also be -1 case in which the script will try to create a transparent image, if possible. Default is &quot;#FFFFFF&quot;.;;d4,1235;;b3,0;;m,0;;einteger $width;;pinteger $height;;pstring $background_color;;p">
</treenode>
<treenode node="_sharpen_image;PHP:Function Name;Z:\Godoy\clases\Zebra_Image.php;f12;1290;5;1310;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    _sharpen_image($image)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sharpens images. Useful when creating thumbnails.&#10;Code taken from the comments at {&#10;&lt;b&gt;link&lt;/b&gt;: http://docs.php.net/imageconvolution}.&#10;&lt;i&gt;This function will yield a result only for PHP version 5.1.0+ and will leave the image unaltered for older&#10;versions!&lt;/i&gt;&#10;identifier  An image identifier&#10;&lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;$identifier&lt;/b&gt;: identifier  An image identifier;;d4,1291;;b3,0;;m,0;;e $identifier;;p">
</treenode>
<treenode node="_write_image;PHP:Function Name;Z:\Godoy\clases\Zebra_Image.php;f12;1322;5;1399;;;;vpos;;v;;aboolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    _write_image($identifier)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates a new image from given image identifier having the extension as specified by {&#10;&lt;b&gt;link&lt;/b&gt;: target_path}.&#10;identifier  An image identifier&#10;&lt;b&gt;return&lt;/b&gt;: Returns TRUE on success or FALSE on error.&#10;If FALSE is returned, check the {&#10;&lt;b&gt;link&lt;/b&gt;: error} property to see the error code.&#10;&lt;b&gt;access&lt;/b&gt;: private&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;$identifier&lt;/b&gt;: identifier  An image identifier&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   If FALSE is returned, check the {;;d4,1323;;b3,0;;m,0;;e $identifier;;p">
</treenode>
<treenode node="apply_filter;PHP:Function Name;Z:\Godoy\clases\Zebra_Image.php;f11;306;5;373;;;;vpos;;v;;aboolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    apply_filter($filter, $arg1 = &apos;&apos;, $arg2 = &apos;&apos;, $arg3 = &apos;&apos;, $arg4 = &apos;&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Applies one or more filters to the image given as {&#10;&lt;b&gt;link&lt;/b&gt;: source_path} and outputs it as the file specified as&#10;{&#10;&lt;b&gt;link&lt;/b&gt;: target_path}.&#10;&lt;samp&gt;This method is available only if the {&#10;&lt;b&gt;link&lt;/b&gt;: http://php.net/manual/en/function.imagefilter.php imagefilter}&#10;function is available (available from PHP 5+), and will leave images unaltered otherwise.&lt;/samp&gt;&#10;&lt;code&gt;&#10;// include the Zebra_Image library&#10;require &apos;path/to/Zebra_Image.php&apos;;s&#10;// instantiate the class&#10;$img = new Zebra_Image();s&#10;// a source image&#10;$img-&gt;source_path = &apos;path/to/source.ext&apos;;s&#10;// path to where should the resulting image be saved&#10;// note that by simply setting a different extension to the file will&#10;// instruct the script to create an image of that particular type&#10;$img-&gt;target_path = &apos;path/to/target.ext&apos;;s&#10;// apply the &quot;grayscale&quot; filter&#10;$img-&gt;apply_filter(&apos;grayscale&apos;);s&#10;// apply the &quot;contrast&quot; filter&#10;$img-&gt;apply_filter(&apos;contrast&apos;, -20);s&#10;&lt;/code&gt;&#10;You can also apply multiple filters at once. In this case, the method requires a single argument, an array of&#10;arrays, containing the filters and associated arguments, where applicable:&#10;&lt;code&gt;&#10;// create a sepia effect&#10;// note how we&apos;re applying multiple filters at once&#10;// each filter is in its own array&#10;$img-&gt;apply_filter(array(&#10;// first we apply the &quot;grayscale&quot; filter&#10;array(&apos;grayscale&apos;),&#10;// then we apply the &quot;colorize&quot; filter with 90, 60, 40 as&#10;// the values for red, green and blue&#10;array(&apos;colorize&apos;, 90, 60, 40),&#10;));s&#10;&lt;/code&gt;&#10;The (case-insensitive) name of the filter to apply. Can be one of the following:&#10;-   &lt;b&gt;brightness&lt;/b&gt;       -   changes the brightness of the image;s use &lt;b&gt;arg1&lt;/b&gt;&#10;to set the level of brightness;s the range of brightness&#10;is -255 to 255;s&#10;-   &lt;b&gt;colorize&lt;/b&gt;         -   adds (subtracts) specified RGB values to each pixel;s&#10;use &lt;b&gt;arg1&lt;/b&gt;, &lt;b&gt;arg2&lt;/b&gt; and &lt;b&gt;arg3&lt;/b&gt; in the&#10;form of red, green, blue and &lt;b&gt;arg4&lt;/b&gt; for the alpha&#10;channel. the range for each color is -255 to 255 and&#10;0 to 127 for alpha;s &lt;i&gt;alpha support is available only&#10;for PHP 5.2.5+&lt;/i&gt;;s&#10;-   &lt;b&gt;contrast&lt;/b&gt;         -   changes the contrast of the image;s use &lt;b&gt;arg1&lt;/b&gt;&#10;to set the level of contrast;s the range of contrast&#10;is -100 to 100;s&#10;-   &lt;b&gt;gausian_blur&lt;/b&gt;     -   blurs the image using the Gaussian method;s&#10;-   &lt;b&gt;grayscale&lt;/b&gt;        -   converts the image into grayscale;s&#10;-   &lt;b&gt;edgedetect&lt;/b&gt;       -   uses edge detection to highlight the edges in the image;s&#10;-   &lt;b&gt;emboss&lt;/b&gt;           -   embosses the image;s&#10;-   &lt;b&gt;mean_removal&lt;/b&gt;     -   uses mean removal to achieve a &quot;sketchy&quot; effect;s&#10;-   &lt;b&gt;negate&lt;/b&gt;           -   reverses all the colors of the image;s&#10;-   &lt;b&gt;pixelate&lt;/b&gt;         -   applies pixelation effect to the image, use &lt;b&gt;arg1&lt;/b&gt;&#10;to set the block size and &lt;b&gt;arg2&lt;/b&gt; to set the&#10;pixelation effect mode;s &lt;i&gt;this filter is available&#10;only for PHP 5.3.0+&lt;/i&gt;;s&#10;-   &lt;b&gt;selective_blur&lt;/b&gt;   -   blurs the image;s&#10;-   &lt;b&gt;smooth&lt;/b&gt;           -   makes the image smoother. Use &lt;b&gt;arg1&lt;/b&gt; to set the&#10;level of smoothness. applies a 9-cell convolution matrix&#10;where center pixel has the weight of &lt;b&gt;arg1&lt;/b&gt; and&#10;others weight of 1.0. the result is normalized by dividing&#10;the sum with &lt;b&gt;arg1&lt;/b&gt; + 8.0 (sum of the matrix).&#10;any float is accepted;s&#10;Used by the following filters:&#10;-   &lt;b&gt;brightness&lt;/b&gt;       -   sets the brightness level (-255 to 255)&#10;-   &lt;b&gt;contrast&lt;/b&gt;         -   sets the contrast level (-100 to 100)&#10;-   &lt;b&gt;colorize&lt;/b&gt;         -   sets the value of the red component (-255 to 255)&#10;-   &lt;b&gt;smooth&lt;/b&gt;           -   sets the smoothness level&#10;-   &lt;b&gt;pixelate&lt;/b&gt;         -   sets the block size, in pixels&#10;Used by the following filters:&#10;-   &lt;b&gt;colorize&lt;/b&gt;         -   sets the value of the green component (-255 to 255)&#10;-   &lt;b&gt;pixelate&lt;/b&gt;         -   whether to use advanced pixelation effect or not (defaults to FALSE).&#10;Used by the following filters:&#10;-   &lt;b&gt;colorize&lt;/b&gt;         -   sets the value of the blue component (-255 to 255)&#10;Used by the following filters:&#10;-   &lt;b&gt;colorize&lt;/b&gt;         -   alpha channel;s a value between 0 and 127. 0 indicates&#10;completely opaque while 127 indicates completely&#10;transparent.&#10;&lt;b&gt;since&lt;/b&gt;: 2.2.2&#10;&lt;b&gt;return&lt;/b&gt;: Returns TRUE on success or FALSE on error.&#10;If {&#10;&lt;b&gt;link&lt;/b&gt;: http://php.net/manual/en/function.imagefilter.php imagefilter} is not&#10;available the method will return FALSE without setting an {&#10;&lt;b&gt;link&lt;/b&gt;: error} code.&#10;If the requested filter doesn&apos;t exist, or invalid arguments are passed, the method&#10;will trigger a warning.&#10;If FALSE is returned and you are sure that&#10;{&#10;&lt;b&gt;link&lt;/b&gt;: http://php.net/manual/en/function.imagefilter.php imagefilter} exists and that&#10;the requested filter is valid, check the {&#10;&lt;b&gt;link&lt;/b&gt;: error} property to see the error code.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;$filter&lt;/b&gt;: The (case-insensitive) name of the filter to apply. Can be one of the following: -   &lt;b&gt;brightness&lt;/b&gt;       -   changes the brightness of the image;s use &lt;b&gt;arg1&lt;/b&gt; to set the level of brightness;s the range of brightness is -255 to 255;s -   &lt;b&gt;colorize&lt;/b&gt;         -   adds (subtracts) specified RGB values to each pixel;s use &lt;b&gt;arg1&lt;/b&gt;, &lt;b&gt;arg2&lt;/b&gt; and &lt;b&gt;arg3&lt;/b&gt; in the form of red, green, blue and &lt;b&gt;arg4&lt;/b&gt; for the alpha channel. the range for each color is -255 to 255 and 0 to 127 for alpha;s &lt;i&gt;alpha support is available only for PHP 5.2.5+&lt;/i&gt;;s -   &lt;b&gt;contrast&lt;/b&gt;         -   changes the contrast of the image;s use &lt;b&gt;arg1&lt;/b&gt; to set the level of contrast;s the range of contrast is -100 to 100;s -   &lt;b&gt;gausian_blur&lt;/b&gt;     -   blurs the image using the Gaussian method;s -   &lt;b&gt;grayscale&lt;/b&gt;        -   converts the image into grayscale;s -   &lt;b&gt;edgedetect&lt;/b&gt;       -   uses edge detection to highlight the edges in the image;s -   &lt;b&gt;emboss&lt;/b&gt;           -   embosses the image;s -   &lt;b&gt;mean_removal&lt;/b&gt;     -   uses mean removal to achieve a &quot;sketchy&quot; effect;s -   &lt;b&gt;negate&lt;/b&gt;           -   reverses all the colors of the image;s -   &lt;b&gt;pixelate&lt;/b&gt;         -   applies pixelation effect to the image, use &lt;b&gt;arg1&lt;/b&gt; to set the block size and &lt;b&gt;arg2&lt;/b&gt; to set the pixelation effect mode;s &lt;i&gt;this filter is available only for PHP 5.3.0+&lt;/i&gt;;s -   &lt;b&gt;selective_blur&lt;/b&gt;   -   blurs the image;s -   &lt;b&gt;smooth&lt;/b&gt;           -   makes the image smoother. Use &lt;b&gt;arg1&lt;/b&gt; to set the level of smoothness. applies a 9-cell convolution matrix where center pixel has the weight of &lt;b&gt;arg1&lt;/b&gt; and others weight of 1.0. the result is normalized by dividing the sum with &lt;b&gt;arg1&lt;/b&gt; + 8.0 (sum of the matrix). any float is accepted;s&#10;    mixed &lt;b&gt;$arg1&lt;/b&gt;: Used by the following filters: -   &lt;b&gt;brightness&lt;/b&gt;       -   sets the brightness level (-255 to 255) -   &lt;b&gt;contrast&lt;/b&gt;         -   sets the contrast level (-100 to 100) -   &lt;b&gt;colorize&lt;/b&gt;         -   sets the value of the red component (-255 to 255) -   &lt;b&gt;smooth&lt;/b&gt;           -   sets the smoothness level -   &lt;b&gt;pixelate&lt;/b&gt;         -   sets the block size, in pixels&#10;    mixed &lt;b&gt;$arg2&lt;/b&gt;: Used by the following filters: -   &lt;b&gt;colorize&lt;/b&gt;         -   sets the value of the green component (-255 to 255) -   &lt;b&gt;pixelate&lt;/b&gt;         -   whether to use advanced pixelation effect or not (defaults to FALSE).&#10;    mixed &lt;b&gt;$arg3&lt;/b&gt;: Used by the following filters: -   &lt;b&gt;colorize&lt;/b&gt;         -   sets the value of the blue component (-255 to 255)&#10;    mixed &lt;b&gt;$arg4&lt;/b&gt;: Used by the following filters: -   &lt;b&gt;colorize&lt;/b&gt;         -   alpha channel;s a value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   If {;;d4,307;;b1,0;;m,0;;estring $filter;;pmixed $arg1;;pmixed $arg2;;pmixed $arg3;;pmixed $arg4;;p">
</treenode>
<treenode node="crop;PHP:Function Name;Z:\Godoy\clases\Zebra_Image.php;f11;410;5;451;;;;vpos;;v;;aboolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    crop($start_x, $start_y, $end_x, $end_y)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Crops a portion of the image given as {&#10;&lt;b&gt;link&lt;/b&gt;: source_path} and outputs it as the file specified as {&#10;&lt;b&gt;link&lt;/b&gt;: target_path}.&#10;&lt;code&gt;&#10;// include the Zebra_Image library&#10;require &apos;path/to/Zebra_Image.php&apos;;s&#10;// instantiate the class&#10;$img = new Zebra_Image();s&#10;// a source image&#10;$img-&gt;source_path = &apos;path/to/source.ext&apos;;s&#10;// path to where should the resulting image be saved&#10;// note that by simply setting a different extension to the file will&#10;// instruct the script to create an image of that particular type&#10;$img-&gt;target_path = &apos;path/to/target.ext&apos;;s&#10;// crop a rectangle of 100x100 pixels, starting from the top-left corner&#10;$img-&gt;crop(0, 0, 100, 100);s&#10;&lt;/code&gt;&#10;x coordinate to start cropping from&#10;y coordinate to start cropping from&#10;x coordinate where to end the cropping&#10;y coordinate where to end the cropping&#10;&lt;b&gt;since&lt;/b&gt;: 1.0.4&#10;&lt;b&gt;return&lt;/b&gt;: Returns TRUE on success or FALSE on error.&#10;If FALSE is returned, check the {&#10;&lt;b&gt;link&lt;/b&gt;: error} property to see the error code.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    integer &lt;b&gt;$start_x&lt;/b&gt;: x coordinate to start cropping from&#10;    integer &lt;b&gt;$start_y&lt;/b&gt;: y coordinate to start cropping from&#10;    integer &lt;b&gt;$end_x&lt;/b&gt;: x coordinate where to end the cropping&#10;    integer &lt;b&gt;$end_y&lt;/b&gt;: y coordinate where to end the cropping&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   If FALSE is returned, check the {;;d4,411;;b1,0;;m,0;;einteger $start_x;;pinteger $start_y;;pinteger $end_x;;pinteger $end_y;;p">
</treenode>
<treenode node="flip_both;PHP:Function Name;Z:\Godoy\clases\Zebra_Image.php;f11;481;5;484;;;;vpos;;v;;aboolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    flip_both()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Flips both horizontally and vertically the image given as {&#10;&lt;b&gt;link&lt;/b&gt;: source_path} and outputs the resulted image as&#10;{&#10;&lt;b&gt;link&lt;/b&gt;: target_path}&#10;&lt;code&gt;&#10;// include the Zebra_Image library&#10;require &apos;path/to/Zebra_Image.php&apos;;s&#10;// instantiate the class&#10;$img = new Zebra_Image();s&#10;// a source image&#10;$img-&gt;source_path = &apos;path/to/source.ext&apos;;s&#10;// path to where should the resulting image be saved&#10;// note that by simply setting a different extension to the file will&#10;// instruct the script to create an image of that particular type&#10;$img-&gt;target_path = &apos;path/to/target.ext&apos;;s&#10;// flip the image both horizontally and vertically&#10;$img-&gt;flip_both();s&#10;&lt;/code&gt;&#10;&lt;b&gt;since&lt;/b&gt;: 2.1&#10;&lt;b&gt;return&lt;/b&gt;: Returns TRUE on success or FALSE on error.&#10;If FALSE is returned, check the {&#10;&lt;b&gt;link&lt;/b&gt;: error} property to see the error code.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   If FALSE is returned, check the {;;d4,482;;b1,0;;m,0;;e">
</treenode>
<treenode node="flip_horizontal;PHP:Function Name;Z:\Godoy\clases\Zebra_Image.php;f11;511;5;514;;;;vpos;;v;;aboolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    flip_horizontal()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Flips horizontally the image given as {&#10;&lt;b&gt;link&lt;/b&gt;: source_path} and outputs the resulted image as {&#10;&lt;b&gt;link&lt;/b&gt;: target_path}&#10;&lt;code&gt;&#10;// include the Zebra_Image library&#10;require &apos;path/to/Zebra_Image.php&apos;;s&#10;// instantiate the class&#10;$img = new Zebra_Image();s&#10;// a source image&#10;$img-&gt;source_path = &apos;path/to/source.ext&apos;;s&#10;// path to where should the resulting image be saved&#10;// note that by simply setting a different extension to the file will&#10;// instruct the script to create an image of that particular type&#10;$img-&gt;target_path = &apos;path/to/target.ext&apos;;s&#10;// flip the image horizontally&#10;$img-&gt;flip_horizontal();s&#10;&lt;/code&gt;&#10;&lt;b&gt;return&lt;/b&gt;: Returns TRUE on success or FALSE on error.&#10;If FALSE is returned, check the {&#10;&lt;b&gt;link&lt;/b&gt;: error} property to see the error code.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   If FALSE is returned, check the {;;d4,512;;b1,0;;m,0;;e">
</treenode>
<treenode node="flip_vertical;PHP:Function Name;Z:\Godoy\clases\Zebra_Image.php;f11;541;5;544;;;;vpos;;v;;aboolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    flip_vertical()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Flips vertically the image given as {&#10;&lt;b&gt;link&lt;/b&gt;: source_path} and outputs the resulted image as {&#10;&lt;b&gt;link&lt;/b&gt;: target_path}&#10;&lt;code&gt;&#10;// include the Zebra_Image library&#10;require &apos;path/to/Zebra_Image.php&apos;;s&#10;// instantiate the class&#10;$img = new Zebra_Image();s&#10;// a source image&#10;$img-&gt;source_path = &apos;path/to/source.ext&apos;;s&#10;// path to where should the resulting image be saved&#10;// note that by simply setting a different extension to the file will&#10;// instruct the script to create an image of that particular type&#10;$img-&gt;target_path = &apos;path/to/target.ext&apos;;s&#10;// flip the image vertically&#10;$img-&gt;flip_vertical();s&#10;&lt;/code&gt;&#10;&lt;b&gt;return&lt;/b&gt;: Returns TRUE on success or FALSE on error.&#10;If FALSE is returned, check the {&#10;&lt;b&gt;link&lt;/b&gt;: error} property to see the error code.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   If FALSE is returned, check the {;;d4,542;;b1,0;;m,0;;e">
</treenode>
<treenode node="resize;PHP:Function Name;Z:\Godoy\clases\Zebra_Image.php;f11;667;5;913;;;;vpos;;v;;aboolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    resize($width = 0, $height = 0, $method = ZEBRA_IMAGE_CROP_CENTER, $background_color = &apos;#FFFFFF&apos;)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Resizes the image given as {&#10;&lt;b&gt;link&lt;/b&gt;: source_path} and outputs the resulted image as {&#10;&lt;b&gt;link&lt;/b&gt;: target_path}.&#10;&lt;code&gt;&#10;// include the Zebra_Image library&#10;require &apos;path/to/Zebra_Image.php&apos;;s&#10;// instantiate the class&#10;$img = new Zebra_Image();s&#10;// a source image&#10;$img-&gt;source_path = &apos;path/to/source.ext&apos;;s&#10;// path to where should the resulting image be saved&#10;// note that by simply setting a different extension to the file will&#10;// instruct the script to create an image of that particular type&#10;$img-&gt;target_path = &apos;path/to/target.ext&apos;;s&#10;// apply a &quot;sharpen&quot; filter to the resulting images&#10;$img-&gt;sharpen_images = true;s&#10;// resize the image to exactly 150x150 pixels, without altering aspect ratio, by using the CROP_CENTER method&#10;$img-&gt;resize(150, 150, ZEBRA_IMAGE_CROP_CENTER);s&#10;&lt;/code&gt;&#10;The width to resize the image to.&#10;If set to &lt;b&gt;0&lt;/b&gt;, the width will be automatically adjusted, depending&#10;on the value of the &lt;b&gt;height&lt;/b&gt; argument so that the image preserves&#10;its aspect ratio.&#10;If {&#10;&lt;b&gt;link&lt;/b&gt;: preserve_aspect_ratio} is set to TRUE and both this and the&#10;&lt;b&gt;height&lt;/b&gt; arguments are values greater than &lt;b&gt;0&lt;/b&gt;, the image will&#10;be resized to the exact required width and height and the aspect ratio&#10;will be preserved - (also see the description for the &lt;b&gt;method&lt;/b&gt;&#10;argument below on how can this be done).&#10;If {&#10;&lt;b&gt;link&lt;/b&gt;: preserve_aspect_ratio} is set to FALSE, the image will be&#10;resized to the required width and the aspect ratio will be ignored.&#10;If both &lt;b&gt;width&lt;/b&gt; and &lt;b&gt;height&lt;/b&gt; are set to &lt;b&gt;0&lt;/b&gt;, a copy of&#10;the source image will be created ({&#10;&lt;b&gt;link&lt;/b&gt;: jpeg_quality} and&#10;{&#10;&lt;b&gt;link&lt;/b&gt;: png_compression} will still apply).&#10;If either &lt;b&gt;width&lt;/b&gt; or &lt;b&gt;height&lt;/b&gt; are set to &lt;b&gt;0&lt;/b&gt;, the script&#10;will consider the value of the {&#10;&lt;b&gt;link&lt;/b&gt;: preserve_aspect_ratio} to bet set&#10;to TRUE regardless of its actual value!&#10;The height to resize the image to.&#10;If set to &lt;b&gt;0&lt;/b&gt;, the height will be automatically adjusted, depending&#10;on the value of the &lt;b&gt;width&lt;/b&gt; argument so that the image preserves&#10;its aspect ratio.&#10;If {&#10;&lt;b&gt;link&lt;/b&gt;: preserve_aspect_ratio} is set to TRUE and both this and the&#10;&lt;b&gt;width&lt;/b&gt; arguments are values greater than &lt;b&gt;0&lt;/b&gt;, the image will&#10;be resized to the exact required width and height and the aspect ratio&#10;will be preserved - (also see the description for the &lt;b&gt;method&lt;/b&gt;&#10;argument below on how can this be done).&#10;If {&#10;&lt;b&gt;link&lt;/b&gt;: preserve_aspect_ratio} is set to FALSE, the image will be&#10;resized to the required height and the aspect ratio will be ignored.&#10;If both &lt;b&gt;width&lt;/b&gt; and &lt;b&gt;height&lt;/b&gt; are set to &lt;b&gt;0&lt;/b&gt;, a copy of&#10;the source image will be created ({&#10;&lt;b&gt;link&lt;/b&gt;: jpeg_quality} and&#10;{&#10;&lt;b&gt;link&lt;/b&gt;: png_compression} will still apply).&#10;If either &lt;b&gt;height&lt;/b&gt; or &lt;b&gt;width&lt;/b&gt; are set to &lt;b&gt;0&lt;/b&gt;, the script&#10;will consider the value of the {&#10;&lt;b&gt;link&lt;/b&gt;: preserve_aspect_ratio} to bet set&#10;to TRUE regardless of its actual value!&#10;(Optional) Method to use when resizing images to exact width and height&#10;while preserving aspect ratio.&#10;If the {&#10;&lt;b&gt;link&lt;/b&gt;: preserve_aspect_ratio} property is set to TRUE and both the&#10;&lt;b&gt;width&lt;/b&gt; and &lt;b&gt;height&lt;/b&gt; arguments are values greater than &lt;b&gt;0&lt;/b&gt;,&#10;the image will be resized to the exact given width and height and the&#10;aspect ratio will be preserved by using on of the following methods:&#10;-   &lt;b&gt;ZEBRA_IMAGE_BOXED&lt;/b&gt; - the image will be scalled so that it will&#10;fit in a box with the given width and height (both width/height will&#10;be smaller or equal to the required width/height) and then it will&#10;be centered both horizontally and vertically. The blank area will be&#10;filled with the color specified by the &lt;b&gt;bgcolor&lt;/b&gt; argument. (the&#10;blank area will be filled only if the image is not transparent!)&#10;-   &lt;b&gt;ZEBRA_IMAGE_NOT_BOXED&lt;/b&gt; - the image will be scalled so that it&#10;&lt;i&gt;could&lt;/i&gt; fit in a box with the given width and height but will&#10;not be enclosed in a box with given width and height. The new width/&#10;height will be both smaller or equal to the required width/height&#10;-   &lt;b&gt;ZEBRA_IMAGE_CROP_TOPLEFT&lt;/b&gt;&#10;-   &lt;b&gt;ZEBRA_IMAGE_CROP_TOPCENTER&lt;/b&gt;&#10;-   &lt;b&gt;ZEBRA_IMAGE_CROP_TOPRIGHT&lt;/b&gt;&#10;-   &lt;b&gt;ZEBRA_IMAGE_CROP_MIDDLELEFT&lt;/b&gt;&#10;-   &lt;b&gt;ZEBRA_IMAGE_CROP_CENTER&lt;/b&gt;&#10;-   &lt;b&gt;ZEBRA_IMAGE_CROP_MIDDLERIGHT&lt;/b&gt;&#10;-   &lt;b&gt;ZEBRA_IMAGE_CROP_BOTTOMLEFT&lt;/b&gt;&#10;-   &lt;b&gt;ZEBRA_IMAGE_CROP_BOTTOMCENTER&lt;/b&gt;&#10;-   &lt;b&gt;ZEBRA_IMAGE_CROP_BOTTOMRIGHT&lt;/b&gt;&#10;For the methods involving crop, first the image is scaled so that both&#10;its sides are equal or greater than the respective sizes of the bounding&#10;box;s next, a region of required width and height will be cropped from&#10;indicated region of the resulted image.&#10;Default is ZEBRA_IMAGE_CROP_CENTER&#10;(Optional) The hexadecimal color (like &quot;#FFFFFF&quot; or &quot;#FFF&quot;) of the&#10;blank area. See the &lt;b&gt;method&lt;/b&gt; argument.&#10;When set to -1 the script will preserve transparency for transparent GIF&#10;and PNG images. For non-transparent images the background will be white&#10;in this case.&#10;Default is #FFFFFF.&#10;&lt;b&gt;return&lt;/b&gt;: Returns TRUE on success or FALSE on error.&#10;If FALSE is returned, check the {&#10;&lt;b&gt;link&lt;/b&gt;: error} property to see what went&#10;wrong&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    integer &lt;b&gt;$width&lt;/b&gt;: The width to resize the image to. If set to &lt;b&gt;0&lt;/b&gt;, the width will be automatically adjusted, depending on the value of the &lt;b&gt;height&lt;/b&gt; argument so that the image preserves its aspect ratio. If {&#10;    integer &lt;b&gt;$height&lt;/b&gt;: The height to resize the image to. If set to &lt;b&gt;0&lt;/b&gt;, the height will be automatically adjusted, depending on the value of the &lt;b&gt;width&lt;/b&gt; argument so that the image preserves its aspect ratio. If {&#10;    int &lt;b&gt;$method&lt;/b&gt;: (Optional) Method to use when resizing images to exact width and height while preserving aspect ratio. If the {&#10;    hexadecimal &lt;b&gt;$background_color&lt;/b&gt;: (Optional) The hexadecimal color (like &quot;#FFFFFF&quot; or &quot;#FFF&quot;) of the blank area. See the &lt;b&gt;method&lt;/b&gt; argument. When set to -1 the script will preserve transparency for transparent GIF and PNG images. For non-transparent images the background will be white in this case. Default is #FFFFFF.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   If FALSE is returned, check the {;;d4,668;;b1,0;;m,0;;einteger $width;;pinteger $height;;pint $method;;phexadecimal $background_color;;p">
</treenode>
<treenode node="rotate;PHP:Function Name;Z:\Godoy\clases\Zebra_Image.php;f11;954;5;1013;;;;vpos;;v;;aboolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    rotate($angle, $background_color = -1)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Rotates the image given as {&#10;&lt;b&gt;link&lt;/b&gt;: source_path} and outputs the resulted image as {&#10;&lt;b&gt;link&lt;/b&gt;: target_path}.&#10;&lt;code&gt;&#10;// include the Zebra_Image library&#10;require &apos;path/to/Zebra_Image.php&apos;;s&#10;// instantiate the class&#10;$img = new Zebra_Image();s&#10;// a source image&#10;$img-&gt;source_path = &apos;path/to/source.ext&apos;;s&#10;// path to where should the resulting image be saved&#10;// note that by simply setting a different extension to the file will&#10;// instruct the script to create an image of that particular type&#10;$img-&gt;target_path = &apos;path/to/target.ext&apos;;s&#10;// rotate the image 45 degrees, clockwise&#10;$img-&gt;rotate(45);s&#10;&lt;/code&gt;&#10;Angle by which to rotate the image clockwise.&#10;Between 0 and 360.&#10;(Optional) The hexadecimal color (like &quot;#FFFFFF&quot; or &quot;#FFF&quot;) of the&#10;uncovered zone after the rotation.&#10;When set to -1 the script will preserve transparency for transparent GIF&#10;and PNG images. For non-transparent images the background will be white&#10;in this case.&#10;Default is -1.&#10;&lt;b&gt;return&lt;/b&gt;: Returns TRUE on success or FALSE on error.&#10;If FALSE is returned, check the {&#10;&lt;b&gt;link&lt;/b&gt;: error} property to see the error&#10;code.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    double &lt;b&gt;$angle&lt;/b&gt;: Angle by which to rotate the image clockwise. Between 0 and 360.&#10;    mixed &lt;b&gt;$background_color&lt;/b&gt;: (Optional) The hexadecimal color (like &quot;#FFFFFF&quot; or &quot;#FFF&quot;) of the uncovered zone after the rotation. When set to -1 the script will preserve transparency for transparent GIF and PNG images. For non-transparent images the background will be white in this case. Default is -1.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   If FALSE is returned, check the {;;d4,955;;b1,0;;m,0;;edouble $angle;;pmixed $background_color;;p">
</treenode>
</treenode>
<treenode node="includeFile;PHP:Function Name;Z:\Godoy\vendor\composer\ClassLoader.php;f0;441;1;444;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    includeFile($file)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Scope isolated include.&#10;Prevents access to $this/self from included files.;;d0,442;;b0,0;;m,0;;efile;;p">
</treenode>
<treenode node="loadImages;PHP:Function Name;Z:\Godoy\admin\ckeditor\plugins\imageuploader\function.php;f0;9;1;91;;;;vpos;;v;;a;;r;;d22,9;;b0,0;;m,0;;e">
</treenode>
<treenode node="pathHistory;PHP:Function Name;Z:\Godoy\admin\ckeditor\plugins\imageuploader\function.php;f0;93;1;100;;;;vpos;;v;;a;;r;;d23,93;;b0,0;;m,0;;e">
</treenode>
</phptree>
</codestructure>